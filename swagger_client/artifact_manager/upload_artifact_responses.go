// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package artifact_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// UploadArtifactReader is a Reader for the UploadArtifact structure.
type UploadArtifactReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadArtifactReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadArtifactOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewUploadArtifactAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUploadArtifactBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUploadArtifactUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUploadArtifactForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUploadArtifactInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewUploadArtifactGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUploadArtifactOK creates a UploadArtifactOK with default headers values
func NewUploadArtifactOK() *UploadArtifactOK {
	return &UploadArtifactOK{}
}

/* UploadArtifactOK describes a response with status code 200, with default header values.

A successful response.
*/
type UploadArtifactOK struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UploadArtifactOK) Error() string {
	return fmt.Sprintf("[PUT /v1/artifacts/id/{id}/upload/chunked][%d] uploadArtifactOK  %+v", 200, o.Payload)
}
func (o *UploadArtifactOK) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UploadArtifactOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadArtifactAccepted creates a UploadArtifactAccepted with default headers values
func NewUploadArtifactAccepted() *UploadArtifactAccepted {
	return &UploadArtifactAccepted{}
}

/* UploadArtifactAccepted describes a response with status code 202, with default header values.

Accepted. The API gateway accepted the request for uploading but the uploading process has not been completed.
*/
type UploadArtifactAccepted struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UploadArtifactAccepted) Error() string {
	return fmt.Sprintf("[PUT /v1/artifacts/id/{id}/upload/chunked][%d] uploadArtifactAccepted  %+v", 202, o.Payload)
}
func (o *UploadArtifactAccepted) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UploadArtifactAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadArtifactBadRequest creates a UploadArtifactBadRequest with default headers values
func NewUploadArtifactBadRequest() *UploadArtifactBadRequest {
	return &UploadArtifactBadRequest{}
}

/* UploadArtifactBadRequest describes a response with status code 400, with default header values.

Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.
*/
type UploadArtifactBadRequest struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UploadArtifactBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/artifacts/id/{id}/upload/chunked][%d] uploadArtifactBadRequest  %+v", 400, o.Payload)
}
func (o *UploadArtifactBadRequest) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UploadArtifactBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadArtifactUnauthorized creates a UploadArtifactUnauthorized with default headers values
func NewUploadArtifactUnauthorized() *UploadArtifactUnauthorized {
	return &UploadArtifactUnauthorized{}
}

/* UploadArtifactUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type UploadArtifactUnauthorized struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UploadArtifactUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/artifacts/id/{id}/upload/chunked][%d] uploadArtifactUnauthorized  %+v", 401, o.Payload)
}
func (o *UploadArtifactUnauthorized) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UploadArtifactUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadArtifactForbidden creates a UploadArtifactForbidden with default headers values
func NewUploadArtifactForbidden() *UploadArtifactForbidden {
	return &UploadArtifactForbidden{}
}

/* UploadArtifactForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type UploadArtifactForbidden struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UploadArtifactForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/artifacts/id/{id}/upload/chunked][%d] uploadArtifactForbidden  %+v", 403, o.Payload)
}
func (o *UploadArtifactForbidden) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UploadArtifactForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadArtifactInternalServerError creates a UploadArtifactInternalServerError with default headers values
func NewUploadArtifactInternalServerError() *UploadArtifactInternalServerError {
	return &UploadArtifactInternalServerError{}
}

/* UploadArtifactInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type UploadArtifactInternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UploadArtifactInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/artifacts/id/{id}/upload/chunked][%d] uploadArtifactInternalServerError  %+v", 500, o.Payload)
}
func (o *UploadArtifactInternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UploadArtifactInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadArtifactGatewayTimeout creates a UploadArtifactGatewayTimeout with default headers values
func NewUploadArtifactGatewayTimeout() *UploadArtifactGatewayTimeout {
	return &UploadArtifactGatewayTimeout{}
}

/* UploadArtifactGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type UploadArtifactGatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UploadArtifactGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/artifacts/id/{id}/upload/chunked][%d] uploadArtifactGatewayTimeout  %+v", 504, o.Payload)
}
func (o *UploadArtifactGatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UploadArtifactGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

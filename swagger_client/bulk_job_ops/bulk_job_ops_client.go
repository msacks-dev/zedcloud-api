// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package bulk_job_ops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new bulk job ops API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for bulk job ops API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BulkCreateEdgeApplicationInstances(params *BulkCreateEdgeApplicationInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkCreateEdgeApplicationInstancesOK, error)

	BulkImportEdgeApplications(params *BulkImportEdgeApplicationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkImportEdgeApplicationsOK, error)

	BulkImportHardwareModels(params *BulkImportHardwareModelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkImportHardwareModelsOK, error)

	BulkRefreshAndPurgeEdgeApplicationInstances(params *BulkRefreshAndPurgeEdgeApplicationInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkRefreshAndPurgeEdgeApplicationInstancesOK, error)

	BulkRefreshEdgeApplicationInstances(params *BulkRefreshEdgeApplicationInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkRefreshEdgeApplicationInstancesOK, error)

	BulkUpdateEdgeNodeBaseOS(params *BulkUpdateEdgeNodeBaseOSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkUpdateEdgeNodeBaseOSOK, error)

	CreateJob(params *CreateJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateJobOK, error)

	DeleteJob(params *DeleteJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteJobOK, error)

	GetJob(params *GetJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetJobOK, error)

	GetJobByName(params *GetJobByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetJobByNameOK, error)

	QueryJobs(params *QueryJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryJobsOK, error)

	UpdateJob(params *UpdateJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateJobOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BulkCreateEdgeApplicationInstances updates job request to create edge application instances

  Update job request to create edge application instance(s) on edge node(s) matching selection criteria.
*/
func (a *Client) BulkCreateEdgeApplicationInstances(params *BulkCreateEdgeApplicationInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkCreateEdgeApplicationInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkCreateEdgeApplicationInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkCreateEdgeApplicationInstances",
		Method:             "PUT",
		PathPattern:        "/v1/jobs/apps/instances/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkCreateEdgeApplicationInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkCreateEdgeApplicationInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkCreateEdgeApplicationInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkImportEdgeApplications updates job request to import edge application bundles

  Update job request to import edge application bundle(s) from global App Store matching selection criteria.
*/
func (a *Client) BulkImportEdgeApplications(params *BulkImportEdgeApplicationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkImportEdgeApplicationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkImportEdgeApplicationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkImportEdgeApplications",
		Method:             "PUT",
		PathPattern:        "/v1/jobs/apps/bundles/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkImportEdgeApplicationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkImportEdgeApplicationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkImportEdgeApplications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkImportHardwareModels updates job request to import hardware models

  Update job request to import hardware model(s) from global Model Store matching selection criteria.
*/
func (a *Client) BulkImportHardwareModels(params *BulkImportHardwareModelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkImportHardwareModelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkImportHardwareModelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkImportHardwareModels",
		Method:             "PUT",
		PathPattern:        "/v1/jobs/models/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkImportHardwareModelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkImportHardwareModelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkImportHardwareModels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkRefreshAndPurgeEdgeApplicationInstances updates job request to refresh and purge edge application instances

  Update job request to refresh and purge edge application instances matching selection criteria. Update edge application instance(s) to the latest version of the edge application. This operation will result in loss of data and a restart of the edge application instance(s).
*/
func (a *Client) BulkRefreshAndPurgeEdgeApplicationInstances(params *BulkRefreshAndPurgeEdgeApplicationInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkRefreshAndPurgeEdgeApplicationInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkRefreshAndPurgeEdgeApplicationInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkRefreshAndPurgeEdgeApplicationInstances",
		Method:             "PUT",
		PathPattern:        "/v1/jobs/apps/instances/refresh/purge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkRefreshAndPurgeEdgeApplicationInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkRefreshAndPurgeEdgeApplicationInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkRefreshAndPurgeEdgeApplicationInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkRefreshEdgeApplicationInstances updates job request to refresh edge application instances

  Update job request to refresh edge application instances matching selection criteria. Update edge application instance(s) to the latest version of the edge application. This operation will result in a restart of the edge application instance(s).
*/
func (a *Client) BulkRefreshEdgeApplicationInstances(params *BulkRefreshEdgeApplicationInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkRefreshEdgeApplicationInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkRefreshEdgeApplicationInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkRefreshEdgeApplicationInstances",
		Method:             "PUT",
		PathPattern:        "/v1/jobs/apps/instances/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkRefreshEdgeApplicationInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkRefreshEdgeApplicationInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkRefreshEdgeApplicationInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BulkUpdateEdgeNodeBaseOS updates job request to update e v e image on edge nodes

  Update job request to update EVE image on edge nodes. If edge node is already running the latest EVE image no action is taken.
*/
func (a *Client) BulkUpdateEdgeNodeBaseOS(params *BulkUpdateEdgeNodeBaseOSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkUpdateEdgeNodeBaseOSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkUpdateEdgeNodeBaseOSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkUpdateEdgeNodeBaseOS",
		Method:             "PUT",
		PathPattern:        "/v1/jobs/devices/baseos/upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkUpdateEdgeNodeBaseOSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkUpdateEdgeNodeBaseOSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkUpdateEdgeNodeBaseOS: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateJob creates asynchronous job request

  Create an asynchronous job request record.
*/
func (a *Client) CreateJob(params *CreateJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateJob",
		Method:             "POST",
		PathPattern:        "/v1/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteJob deletes asynchronous job request

  Delete an asynchronous job request record.
*/
func (a *Client) DeleteJob(params *DeleteJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteJob",
		Method:             "DELETE",
		PathPattern:        "/v1/jobs/id/{id}/objectType/{objectType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetJob gets asynchronous job request

  Get the configuration and status of an asynchronous job request record.
*/
func (a *Client) GetJob(params *GetJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetJob",
		Method:             "GET",
		PathPattern:        "/v1/jobs/id/{id}/objectType/{objectType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetJobByName gets asynchronous job request

  Get the configuration and status of an asynchronous job request record.
*/
func (a *Client) GetJobByName(params *GetJobByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetJobByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetJobByName",
		Method:             "GET",
		PathPattern:        "/v1/jobs/name/{name}/objectType/{objectType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetJobByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJobByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetJobByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryJobs queries asynchronous job requests

  Query the asynchronous job request records.
*/
func (a *Client) QueryJobs(params *QueryJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryJobs",
		Method:             "GET",
		PathPattern:        "/v1/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateJob updates asynchronous job request

  Update an asynchronous job request record. The usual pattern to update an asynchronous job request record is to retrieve the record and update with the modified values in a new body to update the asynchronous job request record.
*/
func (a *Client) UpdateJob(params *UpdateJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateJob",
		Method:             "PUT",
		PathPattern:        "/v1/jobs/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

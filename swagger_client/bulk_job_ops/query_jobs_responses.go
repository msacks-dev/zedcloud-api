// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package bulk_job_ops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// QueryJobsReader is a Reader for the QueryJobs structure.
type QueryJobsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryJobsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryJobsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryJobsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewQueryJobsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewQueryJobsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryJobsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewQueryJobsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewQueryJobsOK creates a QueryJobsOK with default headers values
func NewQueryJobsOK() *QueryJobsOK {
	return &QueryJobsOK{}
}

/* QueryJobsOK describes a response with status code 200, with default header values.

A successful response.
*/
type QueryJobsOK struct {
	Payload *swagger_models.JobConfigList
}

func (o *QueryJobsOK) Error() string {
	return fmt.Sprintf("[GET /v1/jobs][%d] queryJobsOK  %+v", 200, o.Payload)
}
func (o *QueryJobsOK) GetPayload() *swagger_models.JobConfigList {
	return o.Payload
}

func (o *QueryJobsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.JobConfigList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryJobsBadRequest creates a QueryJobsBadRequest with default headers values
func NewQueryJobsBadRequest() *QueryJobsBadRequest {
	return &QueryJobsBadRequest{}
}

/* QueryJobsBadRequest describes a response with status code 400, with default header values.

Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.
*/
type QueryJobsBadRequest struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *QueryJobsBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/jobs][%d] queryJobsBadRequest  %+v", 400, o.Payload)
}
func (o *QueryJobsBadRequest) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *QueryJobsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryJobsUnauthorized creates a QueryJobsUnauthorized with default headers values
func NewQueryJobsUnauthorized() *QueryJobsUnauthorized {
	return &QueryJobsUnauthorized{}
}

/* QueryJobsUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type QueryJobsUnauthorized struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *QueryJobsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/jobs][%d] queryJobsUnauthorized  %+v", 401, o.Payload)
}
func (o *QueryJobsUnauthorized) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *QueryJobsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryJobsForbidden creates a QueryJobsForbidden with default headers values
func NewQueryJobsForbidden() *QueryJobsForbidden {
	return &QueryJobsForbidden{}
}

/* QueryJobsForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-app level access permission for the operation or does not have access scope to the project.
*/
type QueryJobsForbidden struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *QueryJobsForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/jobs][%d] queryJobsForbidden  %+v", 403, o.Payload)
}
func (o *QueryJobsForbidden) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *QueryJobsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryJobsInternalServerError creates a QueryJobsInternalServerError with default headers values
func NewQueryJobsInternalServerError() *QueryJobsInternalServerError {
	return &QueryJobsInternalServerError{}
}

/* QueryJobsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type QueryJobsInternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *QueryJobsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/jobs][%d] queryJobsInternalServerError  %+v", 500, o.Payload)
}
func (o *QueryJobsInternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *QueryJobsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryJobsGatewayTimeout creates a QueryJobsGatewayTimeout with default headers values
func NewQueryJobsGatewayTimeout() *QueryJobsGatewayTimeout {
	return &QueryJobsGatewayTimeout{}
}

/* QueryJobsGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type QueryJobsGatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *QueryJobsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v1/jobs][%d] queryJobsGatewayTimeout  %+v", 504, o.Payload)
}
func (o *QueryJobsGatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *QueryJobsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package cloud_diagnostics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cloud diagnostics API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cloud diagnostics API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCloudPolicyDocument(params *CreateCloudPolicyDocumentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCloudPolicyDocumentOK, error)

	DeleteCloudPolicyDocument(params *DeleteCloudPolicyDocumentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCloudPolicyDocumentOK, error)

	GetCloudPolicy(params *GetCloudPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCloudPolicyOK, error)

	GetCloudPolicyDocument(params *GetCloudPolicyDocumentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCloudPolicyDocumentOK, error)

	GetCloudPolicyVersion(params *GetCloudPolicyVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCloudPolicyVersionOK, error)

	GetClusterHealthReport(params *GetClusterHealthReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterHealthReportOK, error)

	GetClusterVersion(params *GetClusterVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterVersionOK, error)

	MarkCloudPolicyLatest(params *MarkCloudPolicyLatestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MarkCloudPolicyLatestOK, error)

	QueryCloudPolicies(params *QueryCloudPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryCloudPoliciesOK, error)

	CheckClusterHealth(params *CheckClusterHealthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckClusterHealthOK, error)

	CheckClusterHealth2(params *CheckClusterHealth2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckClusterHealth2OK, error)

	CheckMicroserviceHealth(params *CheckMicroserviceHealthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckMicroserviceHealthOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCloudPolicyDocument create cloud policy document API
*/
func (a *Client) CreateCloudPolicyDocument(params *CreateCloudPolicyDocumentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCloudPolicyDocumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloudPolicyDocumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateCloudPolicyDocument",
		Method:             "POST",
		PathPattern:        "/v1/cloud/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCloudPolicyDocumentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCloudPolicyDocumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateCloudPolicyDocument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCloudPolicyDocument delete cloud policy document API
*/
func (a *Client) DeleteCloudPolicyDocument(params *DeleteCloudPolicyDocumentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCloudPolicyDocumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudPolicyDocumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCloudPolicyDocument",
		Method:             "DELETE",
		PathPattern:        "/v1/cloud/policies/id/{fileURL}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudPolicyDocumentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCloudPolicyDocumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCloudPolicyDocument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCloudPolicy gets cloud policy latest version

  Get policy record for latest version of Cloud policy.
*/
func (a *Client) GetCloudPolicy(params *GetCloudPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCloudPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCloudPolicy",
		Method:             "GET",
		PathPattern:        "/v1/cloud/policies/name/{policy}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCloudPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCloudPolicyDocument gets cloud policy document

  Get policy document for specific version of Cloud policy.
*/
func (a *Client) GetCloudPolicyDocument(params *GetCloudPolicyDocumentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCloudPolicyDocumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudPolicyDocumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCloudPolicyDocument",
		Method:             "GET",
		PathPattern:        "/v1/cloud/policies/id/{fileURL}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudPolicyDocumentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudPolicyDocumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCloudPolicyDocument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCloudPolicyVersion gets cloud policy specific version

  Get policy record for specific version of Cloud policy.
*/
func (a *Client) GetCloudPolicyVersion(params *GetCloudPolicyVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCloudPolicyVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudPolicyVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCloudPolicyVersion",
		Method:             "GET",
		PathPattern:        "/v1/cloud/policies/name/{policy}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudPolicyVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudPolicyVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCloudPolicyVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClusterHealthReport gets cloud services health report

  Get Cloud services health report.
*/
func (a *Client) GetClusterHealthReport(params *GetClusterHealthReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterHealthReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterHealthReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterHealthReport",
		Method:             "GET",
		PathPattern:        "/v1/cloud/healthreport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterHealthReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterHealthReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClusterHealthReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClusterVersion gets cloud controller software version

  Get Cloud controller software version.
*/
func (a *Client) GetClusterVersion(params *GetClusterVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClusterVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterVersion",
		Method:             "GET",
		PathPattern:        "/v1/cloud/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClusterVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MarkCloudPolicyLatest mark cloud policy latest API
*/
func (a *Client) MarkCloudPolicyLatest(params *MarkCloudPolicyLatestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MarkCloudPolicyLatestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMarkCloudPolicyLatestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MarkCloudPolicyLatest",
		Method:             "PUT",
		PathPattern:        "/v1/cloud/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MarkCloudPolicyLatestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MarkCloudPolicyLatestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MarkCloudPolicyLatest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryCloudPolicies queries cloud policies

  Query policy records of latest version of Cloud policies.
*/
func (a *Client) QueryCloudPolicies(params *QueryCloudPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryCloudPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryCloudPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryCloudPolicies",
		Method:             "GET",
		PathPattern:        "/v1/cloud/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryCloudPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryCloudPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryCloudPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckClusterHealth checks cloud reachability

  Check Cloud reachability by sending a ping message to API gateway. API gateway will echo back either "pong" or the id specified.
*/
func (a *Client) CheckClusterHealth(params *CheckClusterHealthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckClusterHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckClusterHealthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "checkClusterHealth",
		Method:             "GET",
		PathPattern:        "/v1/cloud/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckClusterHealthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckClusterHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for checkClusterHealth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckClusterHealth2 checks cloud reachability

  Check Cloud reachability by sending a ping message to API gateway. API gateway will echo back either "pong" or the id specified.
*/
func (a *Client) CheckClusterHealth2(params *CheckClusterHealth2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckClusterHealth2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckClusterHealth2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "checkClusterHealth2",
		Method:             "GET",
		PathPattern:        "/v1/cloud/ping/id/{pingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckClusterHealth2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckClusterHealth2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for checkClusterHealth2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckMicroserviceHealth checks cloud services health

  Check Cloud services health by sending a hello name to microservice behind API Gateway. Microservice will echo back the name.
*/
func (a *Client) CheckMicroserviceHealth(params *CheckMicroserviceHealthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckMicroserviceHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckMicroserviceHealthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "checkMicroserviceHealth",
		Method:             "POST",
		PathPattern:        "/v1/hello",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckMicroserviceHealthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckMicroserviceHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for checkMicroserviceHealth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

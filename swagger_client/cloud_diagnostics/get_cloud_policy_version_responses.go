// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package cloud_diagnostics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// GetCloudPolicyVersionReader is a Reader for the GetCloudPolicyVersion structure.
type GetCloudPolicyVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCloudPolicyVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCloudPolicyVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetCloudPolicyVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCloudPolicyVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetCloudPolicyVersionGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCloudPolicyVersionOK creates a GetCloudPolicyVersionOK with default headers values
func NewGetCloudPolicyVersionOK() *GetCloudPolicyVersionOK {
	return &GetCloudPolicyVersionOK{}
}

/* GetCloudPolicyVersionOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetCloudPolicyVersionOK struct {
	Payload *swagger_models.PolicyDocVersionResp
}

func (o *GetCloudPolicyVersionOK) Error() string {
	return fmt.Sprintf("[GET /v1/cloud/policies/name/{policy}/{version}][%d] getCloudPolicyVersionOK  %+v", 200, o.Payload)
}
func (o *GetCloudPolicyVersionOK) GetPayload() *swagger_models.PolicyDocVersionResp {
	return o.Payload
}

func (o *GetCloudPolicyVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.PolicyDocVersionResp)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCloudPolicyVersionNotFound creates a GetCloudPolicyVersionNotFound with default headers values
func NewGetCloudPolicyVersionNotFound() *GetCloudPolicyVersionNotFound {
	return &GetCloudPolicyVersionNotFound{}
}

/* GetCloudPolicyVersionNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type GetCloudPolicyVersionNotFound struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *GetCloudPolicyVersionNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/cloud/policies/name/{policy}/{version}][%d] getCloudPolicyVersionNotFound  %+v", 404, o.Payload)
}
func (o *GetCloudPolicyVersionNotFound) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *GetCloudPolicyVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCloudPolicyVersionInternalServerError creates a GetCloudPolicyVersionInternalServerError with default headers values
func NewGetCloudPolicyVersionInternalServerError() *GetCloudPolicyVersionInternalServerError {
	return &GetCloudPolicyVersionInternalServerError{}
}

/* GetCloudPolicyVersionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type GetCloudPolicyVersionInternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *GetCloudPolicyVersionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/cloud/policies/name/{policy}/{version}][%d] getCloudPolicyVersionInternalServerError  %+v", 500, o.Payload)
}
func (o *GetCloudPolicyVersionInternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *GetCloudPolicyVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCloudPolicyVersionGatewayTimeout creates a GetCloudPolicyVersionGatewayTimeout with default headers values
func NewGetCloudPolicyVersionGatewayTimeout() *GetCloudPolicyVersionGatewayTimeout {
	return &GetCloudPolicyVersionGatewayTimeout{}
}

/* GetCloudPolicyVersionGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type GetCloudPolicyVersionGatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *GetCloudPolicyVersionGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v1/cloud/policies/name/{policy}/{version}][%d] getCloudPolicyVersionGatewayTimeout  %+v", 504, o.Payload)
}
func (o *GetCloudPolicyVersionGatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *GetCloudPolicyVersionGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package edge_application_instance_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new edge application instance configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for edge application instance configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ActivateEdgeApplicationInstance(params *ActivateEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActivateEdgeApplicationInstanceOK, error)

	ConnectToEdgeApplicationInstance(params *ConnectToEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConnectToEdgeApplicationInstanceOK, error)

	CreateEdgeApplicationInstance(params *CreateEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEdgeApplicationInstanceOK, error)

	DeActivateEdgeApplicationInstance(params *DeActivateEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeActivateEdgeApplicationInstanceOK, error)

	DeleteEdgeApplicationInstance(params *DeleteEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEdgeApplicationInstanceOK, error)

	GetEdgeApplicationInstance(params *GetEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeApplicationInstanceOK, error)

	GetEdgeApplicationInstanceByName(params *GetEdgeApplicationInstanceByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeApplicationInstanceByNameOK, error)

	QueryEdgeApplicationInstances(params *QueryEdgeApplicationInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryEdgeApplicationInstancesOK, error)

	RefreshEdgeApplicationInstance(params *RefreshEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshEdgeApplicationInstanceOK, error)

	RefreshPurgeEdgeApplicationInstance(params *RefreshPurgeEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshPurgeEdgeApplicationInstanceOK, error)

	RestartEdgeApplicationInstance(params *RestartEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestartEdgeApplicationInstanceOK, error)

	UpdateEdgeApplicationInstance(params *UpdateEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEdgeApplicationInstanceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ActivateEdgeApplicationInstance activates edge application instance

  Activate an edge application instance. If already in active state no action is taken.
*/
func (a *Client) ActivateEdgeApplicationInstance(params *ActivateEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActivateEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivateEdgeApplicationInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActivateEdgeApplicationInstance",
		Method:             "PUT",
		PathPattern:        "/v1/apps/instances/id/{id}/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivateEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivateEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ActivateEdgeApplicationInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectToEdgeApplicationInstance connects to edge application instance console

  Remotely connect to console of an edge application instance running on the edge node where the edge application instance has been deployed.
*/
func (a *Client) ConnectToEdgeApplicationInstance(params *ConnectToEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConnectToEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectToEdgeApplicationInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConnectToEdgeApplicationInstance",
		Method:             "PUT",
		PathPattern:        "/v1/apps/instances/id/{id}/console/remote",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConnectToEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectToEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConnectToEdgeApplicationInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateEdgeApplicationInstance creates edge application instance

  Create an edge application instance record.
*/
func (a *Client) CreateEdgeApplicationInstance(params *CreateEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEdgeApplicationInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateEdgeApplicationInstance",
		Method:             "POST",
		PathPattern:        "/v1/apps/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateEdgeApplicationInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeActivateEdgeApplicationInstance deactivates edge application instance

  Deactivate an edge application instance. If already in inactive state no action is taken.
*/
func (a *Client) DeActivateEdgeApplicationInstance(params *DeActivateEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeActivateEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeActivateEdgeApplicationInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeActivateEdgeApplicationInstance",
		Method:             "PUT",
		PathPattern:        "/v1/apps/instances/id/{id}/deactivate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeActivateEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeActivateEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeActivateEdgeApplicationInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEdgeApplicationInstance deletes edge application instance

  Delete an edge application instance record.
*/
func (a *Client) DeleteEdgeApplicationInstance(params *DeleteEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEdgeApplicationInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteEdgeApplicationInstance",
		Method:             "DELETE",
		PathPattern:        "/v1/apps/instances/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteEdgeApplicationInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEdgeApplicationInstance gets edge application instance

  Get the configuration (without security details) of an edge application instance record.
*/
func (a *Client) GetEdgeApplicationInstance(params *GetEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEdgeApplicationInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEdgeApplicationInstance",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEdgeApplicationInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEdgeApplicationInstanceByName gets edge application instance

  Get the configuration (without security details) of an edge application instance record.
*/
func (a *Client) GetEdgeApplicationInstanceByName(params *GetEdgeApplicationInstanceByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeApplicationInstanceByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEdgeApplicationInstanceByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEdgeApplicationInstanceByName",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEdgeApplicationInstanceByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEdgeApplicationInstanceByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEdgeApplicationInstanceByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryEdgeApplicationInstances queries edge application instances

  Query the edge application instance records.
*/
func (a *Client) QueryEdgeApplicationInstances(params *QueryEdgeApplicationInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryEdgeApplicationInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryEdgeApplicationInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryEdgeApplicationInstances",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryEdgeApplicationInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryEdgeApplicationInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryEdgeApplicationInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RefreshEdgeApplicationInstance refreshes edge application instance

  Refresh an edge application instance. Update edge application instance to the latest version of the edge application. This operation will result in a restart of the edge application instance.
*/
func (a *Client) RefreshEdgeApplicationInstance(params *RefreshEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshEdgeApplicationInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RefreshEdgeApplicationInstance",
		Method:             "PUT",
		PathPattern:        "/v1/apps/instances/id/{id}/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RefreshEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RefreshEdgeApplicationInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RefreshPurgeEdgeApplicationInstance refreshes and purge edge application instance

  Refresh and purge an edge application instance, update edge application instance to the latest version of the edge application. This operation will result in loss of data and a restart of the edge application instance.
*/
func (a *Client) RefreshPurgeEdgeApplicationInstance(params *RefreshPurgeEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshPurgeEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshPurgeEdgeApplicationInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RefreshPurgeEdgeApplicationInstance",
		Method:             "PUT",
		PathPattern:        "/v1/apps/instances/id/{id}/refresh/purge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RefreshPurgeEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshPurgeEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RefreshPurgeEdgeApplicationInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RestartEdgeApplicationInstance restarts edge application instance

  Restart an edge application instance, initiate a restart of the edge application instance.
*/
func (a *Client) RestartEdgeApplicationInstance(params *RestartEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestartEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestartEdgeApplicationInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RestartEdgeApplicationInstance",
		Method:             "PUT",
		PathPattern:        "/v1/apps/instances/id/{id}/restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestartEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestartEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RestartEdgeApplicationInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEdgeApplicationInstance updates edge application instance

  Update an edge application instance. The usual pattern to update an edge application bundle record is to retrieve the record and update with the modified values in a new body to update the edge application bundle record.
*/
func (a *Client) UpdateEdgeApplicationInstance(params *UpdateEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEdgeApplicationInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateEdgeApplicationInstance",
		Method:             "PUT",
		PathPattern:        "/v1/apps/instances/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateEdgeApplicationInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

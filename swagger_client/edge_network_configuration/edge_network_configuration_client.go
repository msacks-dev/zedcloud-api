// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package edge_network_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new edge network configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for edge network configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateEdgeNetwork(params *CreateEdgeNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEdgeNetworkOK, error)

	DeleteEdgeNetwork(params *DeleteEdgeNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEdgeNetworkOK, error)

	GetEdgeNetwork(params *GetEdgeNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNetworkOK, error)

	GetEdgeNetworkByName(params *GetEdgeNetworkByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNetworkByNameOK, error)

	QueryEdgeNetworks(params *QueryEdgeNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryEdgeNetworksOK, error)

	UpdateEdgeNetwork(params *UpdateEdgeNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEdgeNetworkOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateEdgeNetwork creates edge network

  Create an edge network record.
*/
func (a *Client) CreateEdgeNetwork(params *CreateEdgeNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEdgeNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEdgeNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateEdgeNetwork",
		Method:             "POST",
		PathPattern:        "/v1/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEdgeNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEdgeNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateEdgeNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEdgeNetwork deletes edge network

  Delete an edge network record.
*/
func (a *Client) DeleteEdgeNetwork(params *DeleteEdgeNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEdgeNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEdgeNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteEdgeNetwork",
		Method:             "DELETE",
		PathPattern:        "/v1/networks/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEdgeNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEdgeNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteEdgeNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEdgeNetwork gets edge network

  Get the configuration (without security details) of an edge network record.
*/
func (a *Client) GetEdgeNetwork(params *GetEdgeNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEdgeNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEdgeNetwork",
		Method:             "GET",
		PathPattern:        "/v1/networks/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEdgeNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEdgeNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEdgeNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEdgeNetworkByName gets edge network

  Get the configuration (without security details) of an edge network record.
*/
func (a *Client) GetEdgeNetworkByName(params *GetEdgeNetworkByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNetworkByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEdgeNetworkByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEdgeNetworkByName",
		Method:             "GET",
		PathPattern:        "/v1/networks/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEdgeNetworkByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEdgeNetworkByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEdgeNetworkByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryEdgeNetworks queries edge networks

  Query the edge network records.
*/
func (a *Client) QueryEdgeNetworks(params *QueryEdgeNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryEdgeNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryEdgeNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryEdgeNetworks",
		Method:             "GET",
		PathPattern:        "/v1/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryEdgeNetworksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryEdgeNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryEdgeNetworks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEdgeNetwork updates edge network

  Update an edge network. The usual pattern to update an edge network record is to retrieve the record and update with the modified values in a new body to update the edge network record.
*/
func (a *Client) UpdateEdgeNetwork(params *UpdateEdgeNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEdgeNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEdgeNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateEdgeNetwork",
		Method:             "PUT",
		PathPattern:        "/v1/networks/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEdgeNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEdgeNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateEdgeNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

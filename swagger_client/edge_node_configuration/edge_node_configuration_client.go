// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package edge_node_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new edge node configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for edge node configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ActivateEdgeNode(params *ActivateEdgeNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActivateEdgeNodeOK, error)

	CreateEdgeNode(params *CreateEdgeNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEdgeNodeOK, error)

	DeActivateEdgeNode(params *DeActivateEdgeNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeActivateEdgeNodeOK, error)

	DeleteEdgeNode(params *DeleteEdgeNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEdgeNodeOK, error)

	GetEdgeNode(params *GetEdgeNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeOK, error)

	GetEdgeNodeAttestation(params *GetEdgeNodeAttestationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeAttestationOK, error)

	GetEdgeNodeByName(params *GetEdgeNodeByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeByNameOK, error)

	GetEdgeNodeBySerial(params *GetEdgeNodeBySerialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeBySerialOK, error)

	GetEdgeNodeOnboarding(params *GetEdgeNodeOnboardingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeOnboardingOK, error)

	Offboard(params *OffboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OffboardOK, error)

	QueryEdgeNodes(params *QueryEdgeNodesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryEdgeNodesOK, error)

	Reboot(params *RebootParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RebootOK, error)

	UpdateEdgeNode(params *UpdateEdgeNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEdgeNodeOK, error)

	UpdateEdgeNodeBaseOS(params *UpdateEdgeNodeBaseOSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEdgeNodeBaseOSOK, error)

	UpdateEdgeNodeBaseOS2(params *UpdateEdgeNodeBaseOS2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEdgeNodeBaseOS2OK, error)

	UpdateEdgeNodeBaseOS3(params *UpdateEdgeNodeBaseOS3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEdgeNodeBaseOS3OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ActivateEdgeNode activates edge node

  Activate an edge node. If already in active state no action is taken.
*/
func (a *Client) ActivateEdgeNode(params *ActivateEdgeNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActivateEdgeNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivateEdgeNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActivateEdgeNode",
		Method:             "PUT",
		PathPattern:        "/v1/devices/id/{id}/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivateEdgeNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivateEdgeNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ActivateEdgeNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateEdgeNode creates edge node

  Create an edge node record.
*/
func (a *Client) CreateEdgeNode(params *CreateEdgeNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEdgeNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEdgeNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateEdgeNode",
		Method:             "POST",
		PathPattern:        "/v1/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEdgeNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEdgeNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateEdgeNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeActivateEdgeNode deactivates edge node

  Deactivate an edge node. If already in inactive state no action is taken.
*/
func (a *Client) DeActivateEdgeNode(params *DeActivateEdgeNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeActivateEdgeNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeActivateEdgeNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeActivateEdgeNode",
		Method:             "PUT",
		PathPattern:        "/v1/devices/id/{id}/deactivate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeActivateEdgeNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeActivateEdgeNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeActivateEdgeNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEdgeNode deletes edge node

  Delete an edge node record.
*/
func (a *Client) DeleteEdgeNode(params *DeleteEdgeNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEdgeNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEdgeNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteEdgeNode",
		Method:             "DELETE",
		PathPattern:        "/v1/devices/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEdgeNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEdgeNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteEdgeNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEdgeNode gets edge node

  Get the configuration (without security details) of an edge node record.
*/
func (a *Client) GetEdgeNode(params *GetEdgeNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEdgeNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEdgeNode",
		Method:             "GET",
		PathPattern:        "/v1/devices/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEdgeNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEdgeNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEdgeNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEdgeNodeAttestation gets edge node p c r attestation

  Get the PCR attestation of an edge node record if present.
*/
func (a *Client) GetEdgeNodeAttestation(params *GetEdgeNodeAttestationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeAttestationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEdgeNodeAttestationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEdgeNodeAttestation",
		Method:             "GET",
		PathPattern:        "/v1/devices/id/{id}/attestation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEdgeNodeAttestationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEdgeNodeAttestationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEdgeNodeAttestation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEdgeNodeByName gets edge node by name

  Get the configuration (without security details) of an edge node record.
*/
func (a *Client) GetEdgeNodeByName(params *GetEdgeNodeByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEdgeNodeByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEdgeNodeByName",
		Method:             "GET",
		PathPattern:        "/v1/devices/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEdgeNodeByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEdgeNodeByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEdgeNodeByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEdgeNodeBySerial gets edge node by serial number

  Get the configuration (without security details) of an edge node record.
*/
func (a *Client) GetEdgeNodeBySerial(params *GetEdgeNodeBySerialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeBySerialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEdgeNodeBySerialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEdgeNodeBySerial",
		Method:             "GET",
		PathPattern:        "/v1/devices/serial/{serialno}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEdgeNodeBySerialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEdgeNodeBySerialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEdgeNodeBySerial: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEdgeNodeOnboarding gets edge node onboarding certificate

  Get the onboarding certificate of an edge node record if present, only valid for edge nodes that have not been onboarded.
*/
func (a *Client) GetEdgeNodeOnboarding(params *GetEdgeNodeOnboardingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeOnboardingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEdgeNodeOnboardingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEdgeNodeOnboarding",
		Method:             "GET",
		PathPattern:        "/v1/devices/id/{id}/onboarding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEdgeNodeOnboardingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEdgeNodeOnboardingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEdgeNodeOnboarding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Offboard offoards the edge ndoe

  The API is used for offbaording the device from the enterprise
*/
func (a *Client) Offboard(params *OffboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OffboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOffboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Offboard",
		Method:             "PUT",
		PathPattern:        "/v1/devices/id/{id}/Offboard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OffboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OffboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Offboard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryEdgeNodes queries edge nodes

  Query the edge node records.
*/
func (a *Client) QueryEdgeNodes(params *QueryEdgeNodesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryEdgeNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryEdgeNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryEdgeNodes",
		Method:             "GET",
		PathPattern:        "/v1/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryEdgeNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryEdgeNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryEdgeNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Reboot reboots edge node

  Reboot an edge node remotely. This operation triggers reboot event. Please check bla-bla for device reboot status.
*/
func (a *Client) Reboot(params *RebootParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RebootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRebootParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Reboot",
		Method:             "PUT",
		PathPattern:        "/v1/devices/id/{id}/reboot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RebootReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RebootOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Reboot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEdgeNode updates edge node

  Update an edge node record. The usual pattern to update an edge node record is to retrieve the record and update with the modified values in a new body to update the edge node record.
*/
func (a *Client) UpdateEdgeNode(params *UpdateEdgeNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEdgeNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEdgeNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateEdgeNode",
		Method:             "PUT",
		PathPattern:        "/v1/devices/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEdgeNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEdgeNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateEdgeNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEdgeNodeBaseOS updates e v e image on edge node

  Update EVE image on edge node, if edge node is already running the latest EVE image no action is taken.
*/
func (a *Client) UpdateEdgeNodeBaseOS(params *UpdateEdgeNodeBaseOSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEdgeNodeBaseOSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEdgeNodeBaseOSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateEdgeNodeBaseOS",
		Method:             "PUT",
		PathPattern:        "/v1/devices/id/{id}/apply",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEdgeNodeBaseOSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEdgeNodeBaseOSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateEdgeNodeBaseOS: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEdgeNodeBaseOS2 updates e v e image on edge node

  Update EVE image on edge node, if edge node is already running the latest EVE image no action is taken.
*/
func (a *Client) UpdateEdgeNodeBaseOS2(params *UpdateEdgeNodeBaseOS2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEdgeNodeBaseOS2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEdgeNodeBaseOS2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateEdgeNodeBaseOS2",
		Method:             "PUT",
		PathPattern:        "/v1/devices/id/{id}/publish",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEdgeNodeBaseOS2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEdgeNodeBaseOS2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateEdgeNodeBaseOS2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEdgeNodeBaseOS3 updates e v e image on edge node

  Update EVE image on edge node, if edge node is already running the latest EVE image no action is taken.
*/
func (a *Client) UpdateEdgeNodeBaseOS3(params *UpdateEdgeNodeBaseOS3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEdgeNodeBaseOS3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEdgeNodeBaseOS3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateEdgeNodeBaseOS3",
		Method:             "PUT",
		PathPattern:        "/v1/devices/id/{id}/unpublish",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEdgeNodeBaseOS3Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEdgeNodeBaseOS3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateEdgeNodeBaseOS3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package edge_node_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// GetEdgeNodeByNameReader is a Reader for the GetEdgeNodeByName structure.
type GetEdgeNodeByNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEdgeNodeByNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEdgeNodeByNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetEdgeNodeByNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetEdgeNodeByNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetEdgeNodeByNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetEdgeNodeByNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetEdgeNodeByNameGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetEdgeNodeByNameOK creates a GetEdgeNodeByNameOK with default headers values
func NewGetEdgeNodeByNameOK() *GetEdgeNodeByNameOK {
	return &GetEdgeNodeByNameOK{}
}

/* GetEdgeNodeByNameOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetEdgeNodeByNameOK struct {
	Payload *swagger_models.DeviceConfig
}

func (o *GetEdgeNodeByNameOK) Error() string {
	return fmt.Sprintf("[GET /v1/devices/name/{name}][%d] getEdgeNodeByNameOK  %+v", 200, o.Payload)
}
func (o *GetEdgeNodeByNameOK) GetPayload() *swagger_models.DeviceConfig {
	return o.Payload
}

func (o *GetEdgeNodeByNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.DeviceConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEdgeNodeByNameUnauthorized creates a GetEdgeNodeByNameUnauthorized with default headers values
func NewGetEdgeNodeByNameUnauthorized() *GetEdgeNodeByNameUnauthorized {
	return &GetEdgeNodeByNameUnauthorized{}
}

/* GetEdgeNodeByNameUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type GetEdgeNodeByNameUnauthorized struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *GetEdgeNodeByNameUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/devices/name/{name}][%d] getEdgeNodeByNameUnauthorized  %+v", 401, o.Payload)
}
func (o *GetEdgeNodeByNameUnauthorized) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *GetEdgeNodeByNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEdgeNodeByNameForbidden creates a GetEdgeNodeByNameForbidden with default headers values
func NewGetEdgeNodeByNameForbidden() *GetEdgeNodeByNameForbidden {
	return &GetEdgeNodeByNameForbidden{}
}

/* GetEdgeNodeByNameForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type GetEdgeNodeByNameForbidden struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *GetEdgeNodeByNameForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/devices/name/{name}][%d] getEdgeNodeByNameForbidden  %+v", 403, o.Payload)
}
func (o *GetEdgeNodeByNameForbidden) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *GetEdgeNodeByNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEdgeNodeByNameNotFound creates a GetEdgeNodeByNameNotFound with default headers values
func NewGetEdgeNodeByNameNotFound() *GetEdgeNodeByNameNotFound {
	return &GetEdgeNodeByNameNotFound{}
}

/* GetEdgeNodeByNameNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type GetEdgeNodeByNameNotFound struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *GetEdgeNodeByNameNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/devices/name/{name}][%d] getEdgeNodeByNameNotFound  %+v", 404, o.Payload)
}
func (o *GetEdgeNodeByNameNotFound) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *GetEdgeNodeByNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEdgeNodeByNameInternalServerError creates a GetEdgeNodeByNameInternalServerError with default headers values
func NewGetEdgeNodeByNameInternalServerError() *GetEdgeNodeByNameInternalServerError {
	return &GetEdgeNodeByNameInternalServerError{}
}

/* GetEdgeNodeByNameInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type GetEdgeNodeByNameInternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *GetEdgeNodeByNameInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/devices/name/{name}][%d] getEdgeNodeByNameInternalServerError  %+v", 500, o.Payload)
}
func (o *GetEdgeNodeByNameInternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *GetEdgeNodeByNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEdgeNodeByNameGatewayTimeout creates a GetEdgeNodeByNameGatewayTimeout with default headers values
func NewGetEdgeNodeByNameGatewayTimeout() *GetEdgeNodeByNameGatewayTimeout {
	return &GetEdgeNodeByNameGatewayTimeout{}
}

/* GetEdgeNodeByNameGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type GetEdgeNodeByNameGatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *GetEdgeNodeByNameGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v1/devices/name/{name}][%d] getEdgeNodeByNameGatewayTimeout  %+v", 504, o.Payload)
}
func (o *GetEdgeNodeByNameGatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *GetEdgeNodeByNameGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package edge_node_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// UpdateEdgeNodeBaseOS2Reader is a Reader for the UpdateEdgeNodeBaseOS2 structure.
type UpdateEdgeNodeBaseOS2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateEdgeNodeBaseOS2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateEdgeNodeBaseOS2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateEdgeNodeBaseOS2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateEdgeNodeBaseOS2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateEdgeNodeBaseOS2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateEdgeNodeBaseOS2Conflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateEdgeNodeBaseOS2InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewUpdateEdgeNodeBaseOS2GatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateEdgeNodeBaseOS2OK creates a UpdateEdgeNodeBaseOS2OK with default headers values
func NewUpdateEdgeNodeBaseOS2OK() *UpdateEdgeNodeBaseOS2OK {
	return &UpdateEdgeNodeBaseOS2OK{}
}

/* UpdateEdgeNodeBaseOS2OK describes a response with status code 200, with default header values.

A successful response.
*/
type UpdateEdgeNodeBaseOS2OK struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateEdgeNodeBaseOS2OK) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}/publish][%d] updateEdgeNodeBaseOS2OK  %+v", 200, o.Payload)
}
func (o *UpdateEdgeNodeBaseOS2OK) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateEdgeNodeBaseOS2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEdgeNodeBaseOS2Unauthorized creates a UpdateEdgeNodeBaseOS2Unauthorized with default headers values
func NewUpdateEdgeNodeBaseOS2Unauthorized() *UpdateEdgeNodeBaseOS2Unauthorized {
	return &UpdateEdgeNodeBaseOS2Unauthorized{}
}

/* UpdateEdgeNodeBaseOS2Unauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type UpdateEdgeNodeBaseOS2Unauthorized struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateEdgeNodeBaseOS2Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}/publish][%d] updateEdgeNodeBaseOS2Unauthorized  %+v", 401, o.Payload)
}
func (o *UpdateEdgeNodeBaseOS2Unauthorized) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateEdgeNodeBaseOS2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEdgeNodeBaseOS2Forbidden creates a UpdateEdgeNodeBaseOS2Forbidden with default headers values
func NewUpdateEdgeNodeBaseOS2Forbidden() *UpdateEdgeNodeBaseOS2Forbidden {
	return &UpdateEdgeNodeBaseOS2Forbidden{}
}

/* UpdateEdgeNodeBaseOS2Forbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type UpdateEdgeNodeBaseOS2Forbidden struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateEdgeNodeBaseOS2Forbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}/publish][%d] updateEdgeNodeBaseOS2Forbidden  %+v", 403, o.Payload)
}
func (o *UpdateEdgeNodeBaseOS2Forbidden) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateEdgeNodeBaseOS2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEdgeNodeBaseOS2NotFound creates a UpdateEdgeNodeBaseOS2NotFound with default headers values
func NewUpdateEdgeNodeBaseOS2NotFound() *UpdateEdgeNodeBaseOS2NotFound {
	return &UpdateEdgeNodeBaseOS2NotFound{}
}

/* UpdateEdgeNodeBaseOS2NotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type UpdateEdgeNodeBaseOS2NotFound struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateEdgeNodeBaseOS2NotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}/publish][%d] updateEdgeNodeBaseOS2NotFound  %+v", 404, o.Payload)
}
func (o *UpdateEdgeNodeBaseOS2NotFound) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateEdgeNodeBaseOS2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEdgeNodeBaseOS2Conflict creates a UpdateEdgeNodeBaseOS2Conflict with default headers values
func NewUpdateEdgeNodeBaseOS2Conflict() *UpdateEdgeNodeBaseOS2Conflict {
	return &UpdateEdgeNodeBaseOS2Conflict{}
}

/* UpdateEdgeNodeBaseOS2Conflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing edge node record.
*/
type UpdateEdgeNodeBaseOS2Conflict struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateEdgeNodeBaseOS2Conflict) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}/publish][%d] updateEdgeNodeBaseOS2Conflict  %+v", 409, o.Payload)
}
func (o *UpdateEdgeNodeBaseOS2Conflict) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateEdgeNodeBaseOS2Conflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEdgeNodeBaseOS2InternalServerError creates a UpdateEdgeNodeBaseOS2InternalServerError with default headers values
func NewUpdateEdgeNodeBaseOS2InternalServerError() *UpdateEdgeNodeBaseOS2InternalServerError {
	return &UpdateEdgeNodeBaseOS2InternalServerError{}
}

/* UpdateEdgeNodeBaseOS2InternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type UpdateEdgeNodeBaseOS2InternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateEdgeNodeBaseOS2InternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}/publish][%d] updateEdgeNodeBaseOS2InternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateEdgeNodeBaseOS2InternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateEdgeNodeBaseOS2InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEdgeNodeBaseOS2GatewayTimeout creates a UpdateEdgeNodeBaseOS2GatewayTimeout with default headers values
func NewUpdateEdgeNodeBaseOS2GatewayTimeout() *UpdateEdgeNodeBaseOS2GatewayTimeout {
	return &UpdateEdgeNodeBaseOS2GatewayTimeout{}
}

/* UpdateEdgeNodeBaseOS2GatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type UpdateEdgeNodeBaseOS2GatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateEdgeNodeBaseOS2GatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}/publish][%d] updateEdgeNodeBaseOS2GatewayTimeout  %+v", 504, o.Payload)
}
func (o *UpdateEdgeNodeBaseOS2GatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateEdgeNodeBaseOS2GatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package edge_node_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// UpdateEdgeNodeBaseOS3Reader is a Reader for the UpdateEdgeNodeBaseOS3 structure.
type UpdateEdgeNodeBaseOS3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateEdgeNodeBaseOS3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateEdgeNodeBaseOS3OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateEdgeNodeBaseOS3Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateEdgeNodeBaseOS3Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateEdgeNodeBaseOS3NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateEdgeNodeBaseOS3Conflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateEdgeNodeBaseOS3InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewUpdateEdgeNodeBaseOS3GatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateEdgeNodeBaseOS3OK creates a UpdateEdgeNodeBaseOS3OK with default headers values
func NewUpdateEdgeNodeBaseOS3OK() *UpdateEdgeNodeBaseOS3OK {
	return &UpdateEdgeNodeBaseOS3OK{}
}

/* UpdateEdgeNodeBaseOS3OK describes a response with status code 200, with default header values.

A successful response.
*/
type UpdateEdgeNodeBaseOS3OK struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateEdgeNodeBaseOS3OK) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}/unpublish][%d] updateEdgeNodeBaseOS3OK  %+v", 200, o.Payload)
}
func (o *UpdateEdgeNodeBaseOS3OK) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateEdgeNodeBaseOS3OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEdgeNodeBaseOS3Unauthorized creates a UpdateEdgeNodeBaseOS3Unauthorized with default headers values
func NewUpdateEdgeNodeBaseOS3Unauthorized() *UpdateEdgeNodeBaseOS3Unauthorized {
	return &UpdateEdgeNodeBaseOS3Unauthorized{}
}

/* UpdateEdgeNodeBaseOS3Unauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type UpdateEdgeNodeBaseOS3Unauthorized struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateEdgeNodeBaseOS3Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}/unpublish][%d] updateEdgeNodeBaseOS3Unauthorized  %+v", 401, o.Payload)
}
func (o *UpdateEdgeNodeBaseOS3Unauthorized) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateEdgeNodeBaseOS3Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEdgeNodeBaseOS3Forbidden creates a UpdateEdgeNodeBaseOS3Forbidden with default headers values
func NewUpdateEdgeNodeBaseOS3Forbidden() *UpdateEdgeNodeBaseOS3Forbidden {
	return &UpdateEdgeNodeBaseOS3Forbidden{}
}

/* UpdateEdgeNodeBaseOS3Forbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type UpdateEdgeNodeBaseOS3Forbidden struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateEdgeNodeBaseOS3Forbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}/unpublish][%d] updateEdgeNodeBaseOS3Forbidden  %+v", 403, o.Payload)
}
func (o *UpdateEdgeNodeBaseOS3Forbidden) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateEdgeNodeBaseOS3Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEdgeNodeBaseOS3NotFound creates a UpdateEdgeNodeBaseOS3NotFound with default headers values
func NewUpdateEdgeNodeBaseOS3NotFound() *UpdateEdgeNodeBaseOS3NotFound {
	return &UpdateEdgeNodeBaseOS3NotFound{}
}

/* UpdateEdgeNodeBaseOS3NotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type UpdateEdgeNodeBaseOS3NotFound struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateEdgeNodeBaseOS3NotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}/unpublish][%d] updateEdgeNodeBaseOS3NotFound  %+v", 404, o.Payload)
}
func (o *UpdateEdgeNodeBaseOS3NotFound) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateEdgeNodeBaseOS3NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEdgeNodeBaseOS3Conflict creates a UpdateEdgeNodeBaseOS3Conflict with default headers values
func NewUpdateEdgeNodeBaseOS3Conflict() *UpdateEdgeNodeBaseOS3Conflict {
	return &UpdateEdgeNodeBaseOS3Conflict{}
}

/* UpdateEdgeNodeBaseOS3Conflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing edge node record.
*/
type UpdateEdgeNodeBaseOS3Conflict struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateEdgeNodeBaseOS3Conflict) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}/unpublish][%d] updateEdgeNodeBaseOS3Conflict  %+v", 409, o.Payload)
}
func (o *UpdateEdgeNodeBaseOS3Conflict) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateEdgeNodeBaseOS3Conflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEdgeNodeBaseOS3InternalServerError creates a UpdateEdgeNodeBaseOS3InternalServerError with default headers values
func NewUpdateEdgeNodeBaseOS3InternalServerError() *UpdateEdgeNodeBaseOS3InternalServerError {
	return &UpdateEdgeNodeBaseOS3InternalServerError{}
}

/* UpdateEdgeNodeBaseOS3InternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type UpdateEdgeNodeBaseOS3InternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateEdgeNodeBaseOS3InternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}/unpublish][%d] updateEdgeNodeBaseOS3InternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateEdgeNodeBaseOS3InternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateEdgeNodeBaseOS3InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEdgeNodeBaseOS3GatewayTimeout creates a UpdateEdgeNodeBaseOS3GatewayTimeout with default headers values
func NewUpdateEdgeNodeBaseOS3GatewayTimeout() *UpdateEdgeNodeBaseOS3GatewayTimeout {
	return &UpdateEdgeNodeBaseOS3GatewayTimeout{}
}

/* UpdateEdgeNodeBaseOS3GatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type UpdateEdgeNodeBaseOS3GatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateEdgeNodeBaseOS3GatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}/unpublish][%d] updateEdgeNodeBaseOS3GatewayTimeout  %+v", 504, o.Payload)
}
func (o *UpdateEdgeNodeBaseOS3GatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateEdgeNodeBaseOS3GatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

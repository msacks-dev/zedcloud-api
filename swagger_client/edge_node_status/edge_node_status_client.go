// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package edge_node_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new edge node status API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for edge node status API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetEdgeNodeEvents(params *GetEdgeNodeEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeEventsOK, error)

	GetEdgeNodeEventsByName(params *GetEdgeNodeEventsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeEventsByNameOK, error)

	GetEdgeNodeResourceMetricsByID(params *GetEdgeNodeResourceMetricsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeResourceMetricsByIDOK, error)

	GetEdgeNodeResourceMetricsByName(params *GetEdgeNodeResourceMetricsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeResourceMetricsByNameOK, error)

	GetEdgeNodeStatus(params *GetEdgeNodeStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeStatusOK, error)

	GetEdgeNodeStatusByName(params *GetEdgeNodeStatusByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeStatusByNameOK, error)

	QueryEdgeNodeStatus(params *QueryEdgeNodeStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryEdgeNodeStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetEdgeNodeEvents gets edge node events by id

  Get configuration and status events of an edge node by id.
*/
func (a *Client) GetEdgeNodeEvents(params *GetEdgeNodeEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEdgeNodeEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEdgeNodeEvents",
		Method:             "GET",
		PathPattern:        "/v1/devices/id/{objid}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEdgeNodeEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEdgeNodeEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEdgeNodeEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEdgeNodeEventsByName gets edge node events by id

  Get configuration and status events of an edge node by id.
*/
func (a *Client) GetEdgeNodeEventsByName(params *GetEdgeNodeEventsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeEventsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEdgeNodeEventsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEdgeNodeEventsByName",
		Method:             "GET",
		PathPattern:        "/v1/devices/name/{objname}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEdgeNodeEventsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEdgeNodeEventsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEdgeNodeEventsByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEdgeNodeResourceMetricsByID gets edge node resource usage timeline

  Get the resource usage timeline of an edge node
*/
func (a *Client) GetEdgeNodeResourceMetricsByID(params *GetEdgeNodeResourceMetricsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeResourceMetricsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEdgeNodeResourceMetricsByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEdgeNodeResourceMetricsById",
		Method:             "GET",
		PathPattern:        "/v1/devices/id/{objid}/timeSeries/{mType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEdgeNodeResourceMetricsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEdgeNodeResourceMetricsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEdgeNodeResourceMetricsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEdgeNodeResourceMetricsByName gets edge node resource usage timeline

  Get the resource usage timeline of an edge node
*/
func (a *Client) GetEdgeNodeResourceMetricsByName(params *GetEdgeNodeResourceMetricsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeResourceMetricsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEdgeNodeResourceMetricsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEdgeNodeResourceMetricsByName",
		Method:             "GET",
		PathPattern:        "/v1/devices/name/{objname}/timeSeries/{mType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEdgeNodeResourceMetricsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEdgeNodeResourceMetricsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEdgeNodeResourceMetricsByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEdgeNodeStatus gets edge node status

  Get the status of an edge node as reported by the edge node itself
*/
func (a *Client) GetEdgeNodeStatus(params *GetEdgeNodeStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEdgeNodeStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEdgeNodeStatus",
		Method:             "GET",
		PathPattern:        "/v1/devices/id/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEdgeNodeStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEdgeNodeStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEdgeNodeStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEdgeNodeStatusByName gets edge node status

  Get the status of an edge node as reported by the edge node itself
*/
func (a *Client) GetEdgeNodeStatusByName(params *GetEdgeNodeStatusByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEdgeNodeStatusByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEdgeNodeStatusByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEdgeNodeStatusByName",
		Method:             "GET",
		PathPattern:        "/v1/devices/name/{name}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEdgeNodeStatusByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEdgeNodeStatusByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEdgeNodeStatusByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryEdgeNodeStatus queries status of edge nodes

  Query the status of edge nodes as reported by the edge nodes themselves
*/
func (a *Client) QueryEdgeNodeStatus(params *QueryEdgeNodeStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryEdgeNodeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryEdgeNodeStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryEdgeNodeStatus",
		Method:             "GET",
		PathPattern:        "/v1/devices/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryEdgeNodeStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryEdgeNodeStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryEdgeNodeStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

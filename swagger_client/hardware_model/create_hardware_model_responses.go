// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package hardware_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// CreateHardwareModelReader is a Reader for the CreateHardwareModel structure.
type CreateHardwareModelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateHardwareModelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateHardwareModelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateHardwareModelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateHardwareModelUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateHardwareModelForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateHardwareModelConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateHardwareModelInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewCreateHardwareModelGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateHardwareModelOK creates a CreateHardwareModelOK with default headers values
func NewCreateHardwareModelOK() *CreateHardwareModelOK {
	return &CreateHardwareModelOK{}
}

/* CreateHardwareModelOK describes a response with status code 200, with default header values.

A successful response.
*/
type CreateHardwareModelOK struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *CreateHardwareModelOK) Error() string {
	return fmt.Sprintf("[POST /v1/sysmodels][%d] createHardwareModelOK  %+v", 200, o.Payload)
}
func (o *CreateHardwareModelOK) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *CreateHardwareModelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHardwareModelBadRequest creates a CreateHardwareModelBadRequest with default headers values
func NewCreateHardwareModelBadRequest() *CreateHardwareModelBadRequest {
	return &CreateHardwareModelBadRequest{}
}

/* CreateHardwareModelBadRequest describes a response with status code 400, with default header values.

Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.
*/
type CreateHardwareModelBadRequest struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *CreateHardwareModelBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/sysmodels][%d] createHardwareModelBadRequest  %+v", 400, o.Payload)
}
func (o *CreateHardwareModelBadRequest) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *CreateHardwareModelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHardwareModelUnauthorized creates a CreateHardwareModelUnauthorized with default headers values
func NewCreateHardwareModelUnauthorized() *CreateHardwareModelUnauthorized {
	return &CreateHardwareModelUnauthorized{}
}

/* CreateHardwareModelUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type CreateHardwareModelUnauthorized struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *CreateHardwareModelUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/sysmodels][%d] createHardwareModelUnauthorized  %+v", 401, o.Payload)
}
func (o *CreateHardwareModelUnauthorized) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *CreateHardwareModelUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHardwareModelForbidden creates a CreateHardwareModelForbidden with default headers values
func NewCreateHardwareModelForbidden() *CreateHardwareModelForbidden {
	return &CreateHardwareModelForbidden{}
}

/* CreateHardwareModelForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type CreateHardwareModelForbidden struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *CreateHardwareModelForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/sysmodels][%d] createHardwareModelForbidden  %+v", 403, o.Payload)
}
func (o *CreateHardwareModelForbidden) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *CreateHardwareModelForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHardwareModelConflict creates a CreateHardwareModelConflict with default headers values
func NewCreateHardwareModelConflict() *CreateHardwareModelConflict {
	return &CreateHardwareModelConflict{}
}

/* CreateHardwareModelConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this hardware model record will conflict with an already existing hardware model record.
*/
type CreateHardwareModelConflict struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *CreateHardwareModelConflict) Error() string {
	return fmt.Sprintf("[POST /v1/sysmodels][%d] createHardwareModelConflict  %+v", 409, o.Payload)
}
func (o *CreateHardwareModelConflict) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *CreateHardwareModelConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHardwareModelInternalServerError creates a CreateHardwareModelInternalServerError with default headers values
func NewCreateHardwareModelInternalServerError() *CreateHardwareModelInternalServerError {
	return &CreateHardwareModelInternalServerError{}
}

/* CreateHardwareModelInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type CreateHardwareModelInternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *CreateHardwareModelInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/sysmodels][%d] createHardwareModelInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateHardwareModelInternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *CreateHardwareModelInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHardwareModelGatewayTimeout creates a CreateHardwareModelGatewayTimeout with default headers values
func NewCreateHardwareModelGatewayTimeout() *CreateHardwareModelGatewayTimeout {
	return &CreateHardwareModelGatewayTimeout{}
}

/* CreateHardwareModelGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type CreateHardwareModelGatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *CreateHardwareModelGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /v1/sysmodels][%d] createHardwareModelGatewayTimeout  %+v", 504, o.Payload)
}
func (o *CreateHardwareModelGatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *CreateHardwareModelGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

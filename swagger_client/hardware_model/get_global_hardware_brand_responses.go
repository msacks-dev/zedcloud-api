// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package hardware_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// GetGlobalHardwareBrandReader is a Reader for the GetGlobalHardwareBrand structure.
type GetGlobalHardwareBrandReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGlobalHardwareBrandReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGlobalHardwareBrandOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetGlobalHardwareBrandUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGlobalHardwareBrandForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGlobalHardwareBrandNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGlobalHardwareBrandInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetGlobalHardwareBrandGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGlobalHardwareBrandOK creates a GetGlobalHardwareBrandOK with default headers values
func NewGetGlobalHardwareBrandOK() *GetGlobalHardwareBrandOK {
	return &GetGlobalHardwareBrandOK{}
}

/* GetGlobalHardwareBrandOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetGlobalHardwareBrandOK struct {
	Payload *swagger_models.SysBrand
}

func (o *GetGlobalHardwareBrandOK) Error() string {
	return fmt.Sprintf("[GET /v1/brands/global/id/{id}][%d] getGlobalHardwareBrandOK  %+v", 200, o.Payload)
}
func (o *GetGlobalHardwareBrandOK) GetPayload() *swagger_models.SysBrand {
	return o.Payload
}

func (o *GetGlobalHardwareBrandOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.SysBrand)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGlobalHardwareBrandUnauthorized creates a GetGlobalHardwareBrandUnauthorized with default headers values
func NewGetGlobalHardwareBrandUnauthorized() *GetGlobalHardwareBrandUnauthorized {
	return &GetGlobalHardwareBrandUnauthorized{}
}

/* GetGlobalHardwareBrandUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type GetGlobalHardwareBrandUnauthorized struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *GetGlobalHardwareBrandUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/brands/global/id/{id}][%d] getGlobalHardwareBrandUnauthorized  %+v", 401, o.Payload)
}
func (o *GetGlobalHardwareBrandUnauthorized) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *GetGlobalHardwareBrandUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGlobalHardwareBrandForbidden creates a GetGlobalHardwareBrandForbidden with default headers values
func NewGetGlobalHardwareBrandForbidden() *GetGlobalHardwareBrandForbidden {
	return &GetGlobalHardwareBrandForbidden{}
}

/* GetGlobalHardwareBrandForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type GetGlobalHardwareBrandForbidden struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *GetGlobalHardwareBrandForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/brands/global/id/{id}][%d] getGlobalHardwareBrandForbidden  %+v", 403, o.Payload)
}
func (o *GetGlobalHardwareBrandForbidden) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *GetGlobalHardwareBrandForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGlobalHardwareBrandNotFound creates a GetGlobalHardwareBrandNotFound with default headers values
func NewGetGlobalHardwareBrandNotFound() *GetGlobalHardwareBrandNotFound {
	return &GetGlobalHardwareBrandNotFound{}
}

/* GetGlobalHardwareBrandNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type GetGlobalHardwareBrandNotFound struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *GetGlobalHardwareBrandNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/brands/global/id/{id}][%d] getGlobalHardwareBrandNotFound  %+v", 404, o.Payload)
}
func (o *GetGlobalHardwareBrandNotFound) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *GetGlobalHardwareBrandNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGlobalHardwareBrandInternalServerError creates a GetGlobalHardwareBrandInternalServerError with default headers values
func NewGetGlobalHardwareBrandInternalServerError() *GetGlobalHardwareBrandInternalServerError {
	return &GetGlobalHardwareBrandInternalServerError{}
}

/* GetGlobalHardwareBrandInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type GetGlobalHardwareBrandInternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *GetGlobalHardwareBrandInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/brands/global/id/{id}][%d] getGlobalHardwareBrandInternalServerError  %+v", 500, o.Payload)
}
func (o *GetGlobalHardwareBrandInternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *GetGlobalHardwareBrandInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGlobalHardwareBrandGatewayTimeout creates a GetGlobalHardwareBrandGatewayTimeout with default headers values
func NewGetGlobalHardwareBrandGatewayTimeout() *GetGlobalHardwareBrandGatewayTimeout {
	return &GetGlobalHardwareBrandGatewayTimeout{}
}

/* GetGlobalHardwareBrandGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type GetGlobalHardwareBrandGatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *GetGlobalHardwareBrandGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v1/brands/global/id/{id}][%d] getGlobalHardwareBrandGatewayTimeout  %+v", 504, o.Payload)
}
func (o *GetGlobalHardwareBrandGatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *GetGlobalHardwareBrandGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package hardware_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// UpdateHardwareModelReader is a Reader for the UpdateHardwareModel structure.
type UpdateHardwareModelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateHardwareModelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateHardwareModelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateHardwareModelUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateHardwareModelForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateHardwareModelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateHardwareModelConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateHardwareModelInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewUpdateHardwareModelGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateHardwareModelOK creates a UpdateHardwareModelOK with default headers values
func NewUpdateHardwareModelOK() *UpdateHardwareModelOK {
	return &UpdateHardwareModelOK{}
}

/* UpdateHardwareModelOK describes a response with status code 200, with default header values.

A successful response.
*/
type UpdateHardwareModelOK struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateHardwareModelOK) Error() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] updateHardwareModelOK  %+v", 200, o.Payload)
}
func (o *UpdateHardwareModelOK) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateHardwareModelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateHardwareModelUnauthorized creates a UpdateHardwareModelUnauthorized with default headers values
func NewUpdateHardwareModelUnauthorized() *UpdateHardwareModelUnauthorized {
	return &UpdateHardwareModelUnauthorized{}
}

/* UpdateHardwareModelUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type UpdateHardwareModelUnauthorized struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateHardwareModelUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] updateHardwareModelUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateHardwareModelUnauthorized) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateHardwareModelUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateHardwareModelForbidden creates a UpdateHardwareModelForbidden with default headers values
func NewUpdateHardwareModelForbidden() *UpdateHardwareModelForbidden {
	return &UpdateHardwareModelForbidden{}
}

/* UpdateHardwareModelForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type UpdateHardwareModelForbidden struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateHardwareModelForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] updateHardwareModelForbidden  %+v", 403, o.Payload)
}
func (o *UpdateHardwareModelForbidden) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateHardwareModelForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateHardwareModelNotFound creates a UpdateHardwareModelNotFound with default headers values
func NewUpdateHardwareModelNotFound() *UpdateHardwareModelNotFound {
	return &UpdateHardwareModelNotFound{}
}

/* UpdateHardwareModelNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type UpdateHardwareModelNotFound struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateHardwareModelNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] updateHardwareModelNotFound  %+v", 404, o.Payload)
}
func (o *UpdateHardwareModelNotFound) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateHardwareModelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateHardwareModelConflict creates a UpdateHardwareModelConflict with default headers values
func NewUpdateHardwareModelConflict() *UpdateHardwareModelConflict {
	return &UpdateHardwareModelConflict{}
}

/* UpdateHardwareModelConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing hardware model record.
*/
type UpdateHardwareModelConflict struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateHardwareModelConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] updateHardwareModelConflict  %+v", 409, o.Payload)
}
func (o *UpdateHardwareModelConflict) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateHardwareModelConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateHardwareModelInternalServerError creates a UpdateHardwareModelInternalServerError with default headers values
func NewUpdateHardwareModelInternalServerError() *UpdateHardwareModelInternalServerError {
	return &UpdateHardwareModelInternalServerError{}
}

/* UpdateHardwareModelInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type UpdateHardwareModelInternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateHardwareModelInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] updateHardwareModelInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateHardwareModelInternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateHardwareModelInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateHardwareModelGatewayTimeout creates a UpdateHardwareModelGatewayTimeout with default headers values
func NewUpdateHardwareModelGatewayTimeout() *UpdateHardwareModelGatewayTimeout {
	return &UpdateHardwareModelGatewayTimeout{}
}

/* UpdateHardwareModelGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type UpdateHardwareModelGatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateHardwareModelGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] updateHardwareModelGatewayTimeout  %+v", 504, o.Payload)
}
func (o *UpdateHardwareModelGatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateHardwareModelGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

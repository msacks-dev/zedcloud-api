// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package identity_access_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new identity access management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for identity access management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAuthProfile(params *CreateAuthProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAuthProfileOK, error)

	CreateCredential(params *CreateCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCredentialOK, error)

	CreateEnterprise(params *CreateEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEnterpriseOK, error)

	CreateRealm(params *CreateRealmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRealmOK, error)

	CreateRole(params *CreateRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRoleOK, error)

	CreateUser(params *CreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserOK, error)

	CreateUserSessionSelf(params *CreateUserSessionSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserSessionSelfOK, error)

	DeleteAuthProfile(params *DeleteAuthProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAuthProfileOK, error)

	DeleteCredential(params *DeleteCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCredentialOK, error)

	DeleteEnterprise(params *DeleteEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEnterpriseOK, error)

	DeleteRealm(params *DeleteRealmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRealmOK, error)

	DeleteRole(params *DeleteRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRoleOK, error)

	DeleteUser(params *DeleteUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserOK, error)

	GetAuthProfile(params *GetAuthProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthProfileOK, error)

	GetAuthProfileByName(params *GetAuthProfileByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthProfileByNameOK, error)

	GetEnterprise(params *GetEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEnterpriseOK, error)

	GetEnterpriseByName(params *GetEnterpriseByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEnterpriseByNameOK, error)

	GetEnterpriseSelf(params *GetEnterpriseSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEnterpriseSelfOK, error)

	GetRealm(params *GetRealmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRealmOK, error)

	GetRealmByName(params *GetRealmByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRealmByNameOK, error)

	GetRole(params *GetRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRoleOK, error)

	GetRoleByName(params *GetRoleByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRoleByNameOK, error)

	GetRoleSelf(params *GetRoleSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRoleSelfOK, error)

	GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserOK, error)

	GetUserByName(params *GetUserByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserByNameOK, error)

	GetUserSelf(params *GetUserSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserSelfOK, error)

	GetUserSession(params *GetUserSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserSessionOK, error)

	GetUserSessionSelf(params *GetUserSessionSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserSessionSelfOK, error)

	Login(params *LoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LoginOK, error)

	LoginExternal(params *LoginExternalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LoginExternalOK, error)

	LoginExternalOAuth2Callback(params *LoginExternalOAuth2CallbackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LoginExternalOAuth2CallbackOK, error)

	LoginForgotPassword(params *LoginForgotPasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LoginForgotPasswordOK, error)

	LoginMode(params *LoginModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LoginModeOK, error)

	Logout(params *LogoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LogoutOK, error)

	QueryAuthProfiles(params *QueryAuthProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryAuthProfilesOK, error)

	QueryEnterprises(params *QueryEnterprisesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryEnterprisesOK, error)

	QueryRealms(params *QueryRealmsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryRealmsOK, error)

	QueryRoles(params *QueryRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryRolesOK, error)

	QueryUserSessions(params *QueryUserSessionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryUserSessionsOK, error)

	QueryUsers(params *QueryUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryUsersOK, error)

	RefreshUserSession(params *RefreshUserSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshUserSessionOK, error)

	SignupEnterprise(params *SignupEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SignupEnterpriseOK, error)

	SignupUser(params *SignupUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SignupUserOK, error)

	UpdateAuthProfile(params *UpdateAuthProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAuthProfileOK, error)

	UpdateCredential(params *UpdateCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCredentialOK, error)

	UpdateCredentialSelf(params *UpdateCredentialSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCredentialSelfOK, error)

	UpdateEnterprise(params *UpdateEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEnterpriseOK, error)

	UpdateEnterprise2(params *UpdateEnterprise2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEnterprise2OK, error)

	UpdateRealm(params *UpdateRealmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRealmOK, error)

	UpdateRole(params *UpdateRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRoleOK, error)

	UpdateUser(params *UpdateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserOK, error)

	UpdateUser2(params *UpdateUser2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUser2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAuthProfile creates a a a profile

  Create an AAA profile record.
*/
func (a *Client) CreateAuthProfile(params *CreateAuthProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAuthProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAuthProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateAuthProfile",
		Method:             "POST",
		PathPattern:        "/v1/authorization/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAuthProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAuthProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateAuthProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCredential creates i a m credential

  Create an IAM credential record.
*/
func (a *Client) CreateCredential(params *CreateCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateCredential",
		Method:             "POST",
		PathPattern:        "/v1/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateCredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateEnterprise creates i a m enterprise

  Create an IAM enterprise record.
*/
func (a *Client) CreateEnterprise(params *CreateEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEnterpriseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEnterpriseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateEnterprise",
		Method:             "POST",
		PathPattern:        "/v1/enterprises",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEnterpriseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEnterpriseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateEnterprise: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRealm creates a realm for an enterprise

  Create a realm. For example, zededa.com can be registered as a realm for an enterprise. Only those Oauth users who belong to this domain will be allowed to login to the enterprise.
*/
func (a *Client) CreateRealm(params *CreateRealmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRealmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRealmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRealm",
		Method:             "POST",
		PathPattern:        "/v1/realms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRealmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRealmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateRealm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRole creates i a m role

  Create an IAM role record.
*/
func (a *Client) CreateRole(params *CreateRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRole",
		Method:             "POST",
		PathPattern:        "/v1/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUser creates i a m user

  Create an IAM user record.
*/
func (a *Client) CreateUser(params *CreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateUser",
		Method:             "POST",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUserSessionSelf generates a new session token

  Generate a new token with an extended expiry time. The desired expiry time should be passed as number of seconds.
*/
func (a *Client) CreateUserSessionSelf(params *CreateUserSessionSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserSessionSelfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserSessionSelfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateUserSessionSelf",
		Method:             "POST",
		PathPattern:        "/v1/sessions/token/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserSessionSelfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserSessionSelfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateUserSessionSelf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAuthProfile deletes a a a profile

  Delete an AAA profile record.
*/
func (a *Client) DeleteAuthProfile(params *DeleteAuthProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAuthProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAuthProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAuthProfile",
		Method:             "DELETE",
		PathPattern:        "/v1/authorization/profiles/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAuthProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAuthProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAuthProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCredential deletes i a m credential

  Delete an IAM credential record.
*/
func (a *Client) DeleteCredential(params *DeleteCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCredential",
		Method:             "DELETE",
		PathPattern:        "/v1/credentials/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEnterprise deletes i a m role

  Delete an IAM enterprise record.
*/
func (a *Client) DeleteEnterprise(params *DeleteEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEnterpriseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEnterpriseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteEnterprise",
		Method:             "DELETE",
		PathPattern:        "/v1/enterprises/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEnterpriseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEnterpriseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteEnterprise: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRealm deletes a realm

  Delete a realm.
*/
func (a *Client) DeleteRealm(params *DeleteRealmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRealmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRealmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRealm",
		Method:             "DELETE",
		PathPattern:        "/v1/realms/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRealmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRealmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRealm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRole deletes i a m role

  Delete an IAM role record.
*/
func (a *Client) DeleteRole(params *DeleteRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRole",
		Method:             "DELETE",
		PathPattern:        "/v1/roles/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUser deletes i a m user

  Delete an IAM user record.
*/
func (a *Client) DeleteUser(params *DeleteUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteUser",
		Method:             "DELETE",
		PathPattern:        "/v1/users/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAuthProfile gets a a a profile

  Get the configuration (without security details) of an AAA profile record.
*/
func (a *Client) GetAuthProfile(params *GetAuthProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAuthProfile",
		Method:             "GET",
		PathPattern:        "/v1/authorization/profiles/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAuthProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAuthProfileByName gets a a a profile

  Get the configuration (without security details) of an AAA profile record.
*/
func (a *Client) GetAuthProfileByName(params *GetAuthProfileByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthProfileByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthProfileByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAuthProfileByName",
		Method:             "GET",
		PathPattern:        "/v1/authorization/profiles/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthProfileByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthProfileByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAuthProfileByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnterprise gets enterprise

  Get the configuration (without security details) and status of an enterprise record.
*/
func (a *Client) GetEnterprise(params *GetEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEnterpriseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnterpriseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEnterprise",
		Method:             "GET",
		PathPattern:        "/v1/enterprises/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEnterpriseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnterpriseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEnterprise: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnterpriseByName gets enterprise

  Get the configuration (without security details) and status of an enterprise record.
*/
func (a *Client) GetEnterpriseByName(params *GetEnterpriseByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEnterpriseByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnterpriseByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEnterpriseByName",
		Method:             "GET",
		PathPattern:        "/v1/enterprises/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEnterpriseByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnterpriseByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEnterpriseByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnterpriseSelf gets own enterprise

  Get the configuration (without security details) and status of user's own enterprise record.
*/
func (a *Client) GetEnterpriseSelf(params *GetEnterpriseSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEnterpriseSelfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnterpriseSelfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEnterpriseSelf",
		Method:             "GET",
		PathPattern:        "/v1/enterprises/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEnterpriseSelfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnterpriseSelfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEnterpriseSelf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRealm gets a realm

  Get the details of a realm
*/
func (a *Client) GetRealm(params *GetRealmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRealmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRealmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRealm",
		Method:             "GET",
		PathPattern:        "/v1/realms/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRealmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRealmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRealm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRealmByName gets i a m realm

  Get a realm by name.
*/
func (a *Client) GetRealmByName(params *GetRealmByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRealmByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRealmByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRealmByName",
		Method:             "GET",
		PathPattern:        "/v1/realms/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRealmByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRealmByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRealmByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRole gets i a m role

  Get the configuration (without security details) of an IAM role record.
*/
func (a *Client) GetRole(params *GetRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRole",
		Method:             "GET",
		PathPattern:        "/v1/roles/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRoleByName gets i a m role

  Get the configuration (without security details) of an IAM role record.
*/
func (a *Client) GetRoleByName(params *GetRoleByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRoleByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoleByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRoleByName",
		Method:             "GET",
		PathPattern:        "/v1/roles/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoleByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRoleByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRoleByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRoleSelf gets own i a m role

  Get the configuration (without security details) of user's own IAM role record.
*/
func (a *Client) GetRoleSelf(params *GetRoleSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRoleSelfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoleSelfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRoleSelf",
		Method:             "GET",
		PathPattern:        "/v1/roles/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoleSelfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRoleSelfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRoleSelf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUser gets i a m user

  Get the configuration (without security details) of an IAM user record.
*/
func (a *Client) GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUser",
		Method:             "GET",
		PathPattern:        "/v1/users/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserByName gets i a m user

  Get the configuration (without security details) of an IAM user record.
*/
func (a *Client) GetUserByName(params *GetUserByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserByName",
		Method:             "GET",
		PathPattern:        "/v1/users/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserSelf gets own i a m user

  Get the configuration (without security details) of user's own IAM user record.
*/
func (a *Client) GetUserSelf(params *GetUserSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserSelfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserSelfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserSelf",
		Method:             "GET",
		PathPattern:        "/v1/users/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserSelfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserSelfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserSelf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserSession gets user session

  Get the details of a user session with given session token.
*/
func (a *Client) GetUserSession(params *GetUserSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserSession",
		Method:             "GET",
		PathPattern:        "/v1/sessions/token/{sessionToken.base64}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserSession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserSessionSelf gets current user session

  Get the details of the current user session.
*/
func (a *Client) GetUserSessionSelf(params *GetUserSessionSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserSessionSelfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserSessionSelfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserSessionSelf",
		Method:             "GET",
		PathPattern:        "/v1/sessions/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserSessionSelfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserSessionSelfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserSessionSelf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Login logins locally

  Login with zedcontrol as identity provider.
*/
func (a *Client) Login(params *LoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Login",
		Method:             "POST",
		PathPattern:        "/v1/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Login: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LoginExternal logins externally

  Login with external identity provider (e.g. Okta, gmail, Azure AD etc.). If the enterprise has an AAA Profile configured, zedcontrol will redirect the user to the login page of the external identity provider.
*/
func (a *Client) LoginExternal(params *LoginExternalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LoginExternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginExternalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LoginExternal",
		Method:             "POST",
		PathPattern:        "/v1/login/external",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoginExternalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginExternalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LoginExternal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LoginExternalOAuth2Callback logins callback

  Login callback for external OAauth2 identity provider
*/
func (a *Client) LoginExternalOAuth2Callback(params *LoginExternalOAuth2CallbackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LoginExternalOAuth2CallbackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginExternalOAuth2CallbackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LoginExternalOAuth2Callback",
		Method:             "POST",
		PathPattern:        "/v1/login/oauth/callback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoginExternalOAuth2CallbackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginExternalOAuth2CallbackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LoginExternalOAuth2Callback: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LoginForgotPassword resets forgotten password

  Reset password in case it is forgotten
*/
func (a *Client) LoginForgotPassword(params *LoginForgotPasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LoginForgotPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginForgotPasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LoginForgotPassword",
		Method:             "POST",
		PathPattern:        "/v1/login/forgot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoginForgotPasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginForgotPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LoginForgotPassword: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LoginMode gets a a a mode of the user

  Get the AAA mode of the user. AAA mode can be authentication and authorization with zedcontrol as identity provider or authentication (and optionally authorization) with external identity provider. Oauth2 is supported for external authentication protocols.
*/
func (a *Client) LoginMode(params *LoginModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LoginModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LoginMode",
		Method:             "POST",
		PathPattern:        "/v1/login/mode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoginModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LoginMode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Logout logouts

  Logout from zedcontrol. Current user session will be terminated. In case of login with external identity provider, user session in the identity provider will not be impacted.
*/
func (a *Client) Logout(params *LogoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LogoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Logout",
		Method:             "POST",
		PathPattern:        "/v1/logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LogoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Logout: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryAuthProfiles queries a a a profiles

  Query the AAA profile records.
*/
func (a *Client) QueryAuthProfiles(params *QueryAuthProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryAuthProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryAuthProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryAuthProfiles",
		Method:             "GET",
		PathPattern:        "/v1/authorization/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryAuthProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryAuthProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryAuthProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryEnterprises queries i a m enterprises

  Query the IAM Enterprises records.
*/
func (a *Client) QueryEnterprises(params *QueryEnterprisesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryEnterprisesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryEnterprisesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryEnterprises",
		Method:             "GET",
		PathPattern:        "/v1/enterprises",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryEnterprisesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryEnterprisesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryEnterprises: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryRealms queries all realms

  Query all realms.
*/
func (a *Client) QueryRealms(params *QueryRealmsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryRealmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryRealmsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryRealms",
		Method:             "GET",
		PathPattern:        "/v1/realms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryRealmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryRealmsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryRealms: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryRoles queries i a m roles

  Query the IAM Role records.
*/
func (a *Client) QueryRoles(params *QueryRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryRoles",
		Method:             "GET",
		PathPattern:        "/v1/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryUserSessions queries user sessions

  Query all the active user sessions for all users.
*/
func (a *Client) QueryUserSessions(params *QueryUserSessionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryUserSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryUserSessionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryUserSessions",
		Method:             "GET",
		PathPattern:        "/v1/sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryUserSessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryUserSessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryUserSessions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryUsers queries i a m users

  Query the IAM user records.
*/
func (a *Client) QueryUsers(params *QueryUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryUsers",
		Method:             "GET",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RefreshUserSession refreshes current user session

  Refresh the current user session. The current session will be extended for another 4 hours.
*/
func (a *Client) RefreshUserSession(params *RefreshUserSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshUserSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshUserSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RefreshUserSession",
		Method:             "PUT",
		PathPattern:        "/v1/sessions/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RefreshUserSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshUserSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RefreshUserSession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SignupEnterprise signs up for a new enterprise account

  Sign up for a new enterprise account in zedcontrol. Enterprise will not be active unless admin user is validated with email.
*/
func (a *Client) SignupEnterprise(params *SignupEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SignupEnterpriseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSignupEnterpriseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SignupEnterprise",
		Method:             "POST",
		PathPattern:        "/v1/login/signup/enterprise",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SignupEnterpriseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SignupEnterpriseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SignupEnterprise: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SignupUser gets enterprise

  Get the configuration (without security details) and status of an enterprise record.
*/
func (a *Client) SignupUser(params *SignupUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SignupUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSignupUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SignupUser",
		Method:             "POST",
		PathPattern:        "/v1/login/signup/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SignupUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SignupUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SignupUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAuthProfile updates a a a profile

  Update an AAA profile record. The usual pattern to update an AAA profile record is to retrieve the record and update with the modified values in a new body to update the AAA profile record.
*/
func (a *Client) UpdateAuthProfile(params *UpdateAuthProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAuthProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAuthProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateAuthProfile",
		Method:             "PUT",
		PathPattern:        "/v1/authorization/profiles/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAuthProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAuthProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateAuthProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCredential updates i a m credential

  Update an IAM credential record.
*/
func (a *Client) UpdateCredential(params *UpdateCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCredential",
		Method:             "PUT",
		PathPattern:        "/v1/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateCredential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCredentialSelf updates i a m credential

  Update user's own IAM credential record.
*/
func (a *Client) UpdateCredentialSelf(params *UpdateCredentialSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCredentialSelfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCredentialSelfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCredentialSelf",
		Method:             "PUT",
		PathPattern:        "/v1/credentials/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCredentialSelfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCredentialSelfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateCredentialSelf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEnterprise updates enterprise

  Update an enterprise record. The usual pattern to update an enterprise record is to retrieve the record and update with the modified values in a new body to update the enterprise record.
*/
func (a *Client) UpdateEnterprise(params *UpdateEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEnterpriseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEnterpriseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateEnterprise",
		Method:             "PUT",
		PathPattern:        "/v1/enterprises/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEnterpriseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEnterpriseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateEnterprise: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEnterprise2 updates enterprise

  Update an enterprise record. The usual pattern to update an enterprise record is to retrieve the record and update with the modified values in a new body to update the enterprise record.
*/
func (a *Client) UpdateEnterprise2(params *UpdateEnterprise2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEnterprise2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEnterprise2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateEnterprise2",
		Method:             "PUT",
		PathPattern:        "/v1/enterprises/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEnterprise2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEnterprise2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateEnterprise2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRealm updates a realm

  Update a realm. The usual pattern to update a realm is to retrieve the record and update with the modified values in a new body to update the realm.
*/
func (a *Client) UpdateRealm(params *UpdateRealmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRealmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRealmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateRealm",
		Method:             "PUT",
		PathPattern:        "/v1/realms/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRealmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRealmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateRealm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRole updates i a m role

  Update an IAM role record. The usual pattern to update an IAM role record is to retrieve the record and update with the modified values in a new body to update the IAM role record.
*/
func (a *Client) UpdateRole(params *UpdateRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateRole",
		Method:             "PUT",
		PathPattern:        "/v1/roles/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUser updates i a m user

  Update an IAM user record. The usual pattern to update an IAM user record is to retrieve the record and update with the modified values in a new body to update the IAM user record.
*/
func (a *Client) UpdateUser(params *UpdateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateUser",
		Method:             "PUT",
		PathPattern:        "/v1/users/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUser2 updates i a m user

  Update an IAM user record. The usual pattern to update an IAM user record is to retrieve the record and update with the modified values in a new body to update the IAM user record.
*/
func (a *Client) UpdateUser2(params *UpdateUser2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUser2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUser2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateUser2",
		Method:             "PUT",
		PathPattern:        "/v1/users/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUser2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUser2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateUser2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

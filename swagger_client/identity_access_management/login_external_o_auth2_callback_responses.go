// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package identity_access_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// LoginExternalOAuth2CallbackReader is a Reader for the LoginExternalOAuth2Callback structure.
type LoginExternalOAuth2CallbackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoginExternalOAuth2CallbackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLoginExternalOAuth2CallbackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewLoginExternalOAuth2CallbackUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLoginExternalOAuth2CallbackForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLoginExternalOAuth2CallbackInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewLoginExternalOAuth2CallbackGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLoginExternalOAuth2CallbackOK creates a LoginExternalOAuth2CallbackOK with default headers values
func NewLoginExternalOAuth2CallbackOK() *LoginExternalOAuth2CallbackOK {
	return &LoginExternalOAuth2CallbackOK{}
}

/* LoginExternalOAuth2CallbackOK describes a response with status code 200, with default header values.

A successful response.
*/
type LoginExternalOAuth2CallbackOK struct {
	Payload *swagger_models.AAAFrontendLoginResponse
}

func (o *LoginExternalOAuth2CallbackOK) Error() string {
	return fmt.Sprintf("[POST /v1/login/oauth/callback][%d] loginExternalOAuth2CallbackOK  %+v", 200, o.Payload)
}
func (o *LoginExternalOAuth2CallbackOK) GetPayload() *swagger_models.AAAFrontendLoginResponse {
	return o.Payload
}

func (o *LoginExternalOAuth2CallbackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.AAAFrontendLoginResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginExternalOAuth2CallbackUnauthorized creates a LoginExternalOAuth2CallbackUnauthorized with default headers values
func NewLoginExternalOAuth2CallbackUnauthorized() *LoginExternalOAuth2CallbackUnauthorized {
	return &LoginExternalOAuth2CallbackUnauthorized{}
}

/* LoginExternalOAuth2CallbackUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type LoginExternalOAuth2CallbackUnauthorized struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *LoginExternalOAuth2CallbackUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/login/oauth/callback][%d] loginExternalOAuth2CallbackUnauthorized  %+v", 401, o.Payload)
}
func (o *LoginExternalOAuth2CallbackUnauthorized) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *LoginExternalOAuth2CallbackUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginExternalOAuth2CallbackForbidden creates a LoginExternalOAuth2CallbackForbidden with default headers values
func NewLoginExternalOAuth2CallbackForbidden() *LoginExternalOAuth2CallbackForbidden {
	return &LoginExternalOAuth2CallbackForbidden{}
}

/* LoginExternalOAuth2CallbackForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type LoginExternalOAuth2CallbackForbidden struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *LoginExternalOAuth2CallbackForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/login/oauth/callback][%d] loginExternalOAuth2CallbackForbidden  %+v", 403, o.Payload)
}
func (o *LoginExternalOAuth2CallbackForbidden) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *LoginExternalOAuth2CallbackForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginExternalOAuth2CallbackInternalServerError creates a LoginExternalOAuth2CallbackInternalServerError with default headers values
func NewLoginExternalOAuth2CallbackInternalServerError() *LoginExternalOAuth2CallbackInternalServerError {
	return &LoginExternalOAuth2CallbackInternalServerError{}
}

/* LoginExternalOAuth2CallbackInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type LoginExternalOAuth2CallbackInternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *LoginExternalOAuth2CallbackInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/login/oauth/callback][%d] loginExternalOAuth2CallbackInternalServerError  %+v", 500, o.Payload)
}
func (o *LoginExternalOAuth2CallbackInternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *LoginExternalOAuth2CallbackInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginExternalOAuth2CallbackGatewayTimeout creates a LoginExternalOAuth2CallbackGatewayTimeout with default headers values
func NewLoginExternalOAuth2CallbackGatewayTimeout() *LoginExternalOAuth2CallbackGatewayTimeout {
	return &LoginExternalOAuth2CallbackGatewayTimeout{}
}

/* LoginExternalOAuth2CallbackGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type LoginExternalOAuth2CallbackGatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *LoginExternalOAuth2CallbackGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /v1/login/oauth/callback][%d] loginExternalOAuth2CallbackGatewayTimeout  %+v", 504, o.Payload)
}
func (o *LoginExternalOAuth2CallbackGatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *LoginExternalOAuth2CallbackGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

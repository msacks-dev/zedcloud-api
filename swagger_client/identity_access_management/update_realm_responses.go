// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package identity_access_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// UpdateRealmReader is a Reader for the UpdateRealm structure.
type UpdateRealmReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRealmReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRealmOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateRealmUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRealmForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRealmNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateRealmConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateRealmInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewUpdateRealmGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateRealmOK creates a UpdateRealmOK with default headers values
func NewUpdateRealmOK() *UpdateRealmOK {
	return &UpdateRealmOK{}
}

/* UpdateRealmOK describes a response with status code 200, with default header values.

A successful response.
*/
type UpdateRealmOK struct {
	Payload *swagger_models.CrudResponse
}

func (o *UpdateRealmOK) Error() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] updateRealmOK  %+v", 200, o.Payload)
}
func (o *UpdateRealmOK) GetPayload() *swagger_models.CrudResponse {
	return o.Payload
}

func (o *UpdateRealmOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.CrudResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRealmUnauthorized creates a UpdateRealmUnauthorized with default headers values
func NewUpdateRealmUnauthorized() *UpdateRealmUnauthorized {
	return &UpdateRealmUnauthorized{}
}

/* UpdateRealmUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type UpdateRealmUnauthorized struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateRealmUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] updateRealmUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateRealmUnauthorized) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateRealmUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRealmForbidden creates a UpdateRealmForbidden with default headers values
func NewUpdateRealmForbidden() *UpdateRealmForbidden {
	return &UpdateRealmForbidden{}
}

/* UpdateRealmForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type UpdateRealmForbidden struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateRealmForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] updateRealmForbidden  %+v", 403, o.Payload)
}
func (o *UpdateRealmForbidden) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateRealmForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRealmNotFound creates a UpdateRealmNotFound with default headers values
func NewUpdateRealmNotFound() *UpdateRealmNotFound {
	return &UpdateRealmNotFound{}
}

/* UpdateRealmNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type UpdateRealmNotFound struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateRealmNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] updateRealmNotFound  %+v", 404, o.Payload)
}
func (o *UpdateRealmNotFound) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateRealmNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRealmConflict creates a UpdateRealmConflict with default headers values
func NewUpdateRealmConflict() *UpdateRealmConflict {
	return &UpdateRealmConflict{}
}

/* UpdateRealmConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing realm.
*/
type UpdateRealmConflict struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateRealmConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] updateRealmConflict  %+v", 409, o.Payload)
}
func (o *UpdateRealmConflict) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateRealmConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRealmInternalServerError creates a UpdateRealmInternalServerError with default headers values
func NewUpdateRealmInternalServerError() *UpdateRealmInternalServerError {
	return &UpdateRealmInternalServerError{}
}

/* UpdateRealmInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type UpdateRealmInternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateRealmInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] updateRealmInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateRealmInternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateRealmInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRealmGatewayTimeout creates a UpdateRealmGatewayTimeout with default headers values
func NewUpdateRealmGatewayTimeout() *UpdateRealmGatewayTimeout {
	return &UpdateRealmGatewayTimeout{}
}

/* UpdateRealmGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type UpdateRealmGatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateRealmGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] updateRealmGatewayTimeout  %+v", 504, o.Payload)
}
func (o *UpdateRealmGatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateRealmGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

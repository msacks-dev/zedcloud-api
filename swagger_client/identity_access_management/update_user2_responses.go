// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package identity_access_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// UpdateUser2Reader is a Reader for the UpdateUser2 structure.
type UpdateUser2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUser2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUser2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateUser2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateUser2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUser2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateUser2Conflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateUser2InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewUpdateUser2GatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateUser2OK creates a UpdateUser2OK with default headers values
func NewUpdateUser2OK() *UpdateUser2OK {
	return &UpdateUser2OK{}
}

/* UpdateUser2OK describes a response with status code 200, with default header values.

A successful response.
*/
type UpdateUser2OK struct {
	Payload *swagger_models.CrudResponse
}

func (o *UpdateUser2OK) Error() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] updateUser2OK  %+v", 200, o.Payload)
}
func (o *UpdateUser2OK) GetPayload() *swagger_models.CrudResponse {
	return o.Payload
}

func (o *UpdateUser2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.CrudResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUser2Unauthorized creates a UpdateUser2Unauthorized with default headers values
func NewUpdateUser2Unauthorized() *UpdateUser2Unauthorized {
	return &UpdateUser2Unauthorized{}
}

/* UpdateUser2Unauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type UpdateUser2Unauthorized struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateUser2Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] updateUser2Unauthorized  %+v", 401, o.Payload)
}
func (o *UpdateUser2Unauthorized) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateUser2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUser2Forbidden creates a UpdateUser2Forbidden with default headers values
func NewUpdateUser2Forbidden() *UpdateUser2Forbidden {
	return &UpdateUser2Forbidden{}
}

/* UpdateUser2Forbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type UpdateUser2Forbidden struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateUser2Forbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] updateUser2Forbidden  %+v", 403, o.Payload)
}
func (o *UpdateUser2Forbidden) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateUser2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUser2NotFound creates a UpdateUser2NotFound with default headers values
func NewUpdateUser2NotFound() *UpdateUser2NotFound {
	return &UpdateUser2NotFound{}
}

/* UpdateUser2NotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type UpdateUser2NotFound struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateUser2NotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] updateUser2NotFound  %+v", 404, o.Payload)
}
func (o *UpdateUser2NotFound) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateUser2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUser2Conflict creates a UpdateUser2Conflict with default headers values
func NewUpdateUser2Conflict() *UpdateUser2Conflict {
	return &UpdateUser2Conflict{}
}

/* UpdateUser2Conflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing IAM user record.
*/
type UpdateUser2Conflict struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateUser2Conflict) Error() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] updateUser2Conflict  %+v", 409, o.Payload)
}
func (o *UpdateUser2Conflict) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateUser2Conflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUser2InternalServerError creates a UpdateUser2InternalServerError with default headers values
func NewUpdateUser2InternalServerError() *UpdateUser2InternalServerError {
	return &UpdateUser2InternalServerError{}
}

/* UpdateUser2InternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type UpdateUser2InternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateUser2InternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] updateUser2InternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateUser2InternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateUser2InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUser2GatewayTimeout creates a UpdateUser2GatewayTimeout with default headers values
func NewUpdateUser2GatewayTimeout() *UpdateUser2GatewayTimeout {
	return &UpdateUser2GatewayTimeout{}
}

/* UpdateUser2GatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type UpdateUser2GatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateUser2GatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] updateUser2GatewayTimeout  %+v", 504, o.Payload)
}
func (o *UpdateUser2GatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateUser2GatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

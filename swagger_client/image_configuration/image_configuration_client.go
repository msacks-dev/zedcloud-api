// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package image_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new image configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for image configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateImage(params *CreateImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateImageOK, error)

	DeleteImage(params *DeleteImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteImageOK, error)

	DeleteLatestImage(params *DeleteLatestImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteLatestImageOK, error)

	GetImage(params *GetImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetImageOK, error)

	GetImageByName(params *GetImageByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetImageByNameOK, error)

	GetLatestImageVersion(params *GetLatestImageVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLatestImageVersionOK, error)

	MarkEveImageLatest(params *MarkEveImageLatestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MarkEveImageLatestOK, error)

	MarkEveImageLatest2(params *MarkEveImageLatest2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MarkEveImageLatest2OK, error)

	QueryImages(params *QueryImagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryImagesOK, error)

	QueryLatestImageVersions(params *QueryLatestImageVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryLatestImageVersionsOK, error)

	UpdateImage(params *UpdateImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateImageOK, error)

	UplinkImage(params *UplinkImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UplinkImageOK, *UplinkImageAccepted, error)

	UploadImageChunked(params *UploadImageChunkedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadImageChunkedOK, *UploadImageChunkedAccepted, error)

	UploadImageFile(params *UploadImageFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadImageFileOK, *UploadImageFileAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateImage creates edge application image

  Create an edge application image record.
*/
func (a *Client) CreateImage(params *CreateImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateImage",
		Method:             "POST",
		PathPattern:        "/v1/apps/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteImage deletes edge application image

  Delete an edge application image record.
*/
func (a *Client) DeleteImage(params *DeleteImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteImage",
		Method:             "DELETE",
		PathPattern:        "/v1/apps/images/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLatestImage deletes edge application image

  Delete an edge application image record.
*/
func (a *Client) DeleteLatestImage(params *DeleteLatestImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteLatestImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLatestImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteLatestImage",
		Method:             "DELETE",
		PathPattern:        "/v1/apps/images/baseos/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLatestImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLatestImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLatestImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetImage gets edge application image

  Get the configuration (without security details) of an edge application image record.
*/
func (a *Client) GetImage(params *GetImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetImage",
		Method:             "GET",
		PathPattern:        "/v1/apps/images/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetImageByName gets edge application image

  Get the configuration (without security details) of an edge application image record.
*/
func (a *Client) GetImageByName(params *GetImageByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetImageByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetImageByName",
		Method:             "GET",
		PathPattern:        "/v1/apps/images/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetImageByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImageByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetImageByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLatestImageVersion gets latest version of e v e image

  Query the latest version of EVE image for given hardware architecture.
*/
func (a *Client) GetLatestImageVersion(params *GetLatestImageVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLatestImageVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLatestImageVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLatestImageVersion",
		Method:             "GET",
		PathPattern:        "/v1/apps/images/baseos/latest/hwclass/{imageArch}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLatestImageVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLatestImageVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLatestImageVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MarkEveImageLatest marks eve image as latest

  Mark Eve image as latest for a given hardware architecture.
*/
func (a *Client) MarkEveImageLatest(params *MarkEveImageLatestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MarkEveImageLatestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMarkEveImageLatestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MarkEveImageLatest",
		Method:             "PUT",
		PathPattern:        "/v1/apps/images/baseos/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MarkEveImageLatestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MarkEveImageLatestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MarkEveImageLatest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MarkEveImageLatest2 marks eve image as latest

  Mark Eve image as latest for a given hardware architecture.
*/
func (a *Client) MarkEveImageLatest2(params *MarkEveImageLatest2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MarkEveImageLatest2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMarkEveImageLatest2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "MarkEveImageLatest2",
		Method:             "PUT",
		PathPattern:        "/v1/apps/images/baseos/latest/hwclass/{imageArch}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MarkEveImageLatest2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MarkEveImageLatest2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MarkEveImageLatest2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryImages queries edge application images

  Query the edge application image records.
*/
func (a *Client) QueryImages(params *QueryImagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryImagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryImages",
		Method:             "GET",
		PathPattern:        "/v1/apps/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryImagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryImages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryLatestImageVersions queries latest version of e v e image for each hardware architecture

  Query the latest version of EVE image for each hardware architecture.
*/
func (a *Client) QueryLatestImageVersions(params *QueryLatestImageVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryLatestImageVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryLatestImageVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryLatestImageVersions",
		Method:             "GET",
		PathPattern:        "/v1/apps/images/baseos/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryLatestImageVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryLatestImageVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryLatestImageVersions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateImage updates edge application image

  Update an edge application image. The usual pattern to update an edge application image record is to retrieve the record and update with the modified values in a new body to update the edge application image record.
*/
func (a *Client) UpdateImage(params *UpdateImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateImage",
		Method:             "PUT",
		PathPattern:        "/v1/apps/images/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UplinkImage uplinks edge application image

  Uplinks the edge application image record to an existing binry file in the datastore.
*/
func (a *Client) UplinkImage(params *UplinkImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UplinkImageOK, *UplinkImageAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUplinkImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UplinkImage",
		Method:             "PUT",
		PathPattern:        "/v1/apps/images/name/{name}/uplink",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UplinkImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UplinkImageOK:
		return value, nil, nil
	case *UplinkImageAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for image_configuration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UploadImageChunked uploads edge application image binary file

  Uploads the edge application image binary file in the datastore. This method uses multiple HTTP requests to upload image binary file in smaller chunks. Recommended for larger file size.
*/
func (a *Client) UploadImageChunked(params *UploadImageChunkedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadImageChunkedOK, *UploadImageChunkedAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadImageChunkedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UploadImageChunked",
		Method:             "PUT",
		PathPattern:        "/v1/apps/images/name/{name}/upload/chunked",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadImageChunkedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UploadImageChunkedOK:
		return value, nil, nil
	case *UploadImageChunkedAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for image_configuration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UploadImageFile uploads edge application image binary file

  Uploads the edge application image binary file in the datastore. This method uses single HTTP request to upload the entire image binary file. Recommended for smaller file size.
*/
func (a *Client) UploadImageFile(params *UploadImageFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadImageFileOK, *UploadImageFileAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadImageFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UploadImageFile",
		Method:             "PUT",
		PathPattern:        "/v1/apps/images/name/{name}/upload/file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadImageFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UploadImageFileOK:
		return value, nil, nil
	case *UploadImageFileAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for image_configuration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package image_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// MarkEveImageLatest2Reader is a Reader for the MarkEveImageLatest2 structure.
type MarkEveImageLatest2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MarkEveImageLatest2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMarkEveImageLatest2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMarkEveImageLatest2BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewMarkEveImageLatest2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMarkEveImageLatest2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMarkEveImageLatest2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewMarkEveImageLatest2InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewMarkEveImageLatest2GatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMarkEveImageLatest2OK creates a MarkEveImageLatest2OK with default headers values
func NewMarkEveImageLatest2OK() *MarkEveImageLatest2OK {
	return &MarkEveImageLatest2OK{}
}

/* MarkEveImageLatest2OK describes a response with status code 200, with default header values.

A successful response.
*/
type MarkEveImageLatest2OK struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *MarkEveImageLatest2OK) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/baseos/latest/hwclass/{imageArch}][%d] markEveImageLatest2OK  %+v", 200, o.Payload)
}
func (o *MarkEveImageLatest2OK) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *MarkEveImageLatest2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkEveImageLatest2BadRequest creates a MarkEveImageLatest2BadRequest with default headers values
func NewMarkEveImageLatest2BadRequest() *MarkEveImageLatest2BadRequest {
	return &MarkEveImageLatest2BadRequest{}
}

/* MarkEveImageLatest2BadRequest describes a response with status code 400, with default header values.

Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.
*/
type MarkEveImageLatest2BadRequest struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *MarkEveImageLatest2BadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/baseos/latest/hwclass/{imageArch}][%d] markEveImageLatest2BadRequest  %+v", 400, o.Payload)
}
func (o *MarkEveImageLatest2BadRequest) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *MarkEveImageLatest2BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkEveImageLatest2Unauthorized creates a MarkEveImageLatest2Unauthorized with default headers values
func NewMarkEveImageLatest2Unauthorized() *MarkEveImageLatest2Unauthorized {
	return &MarkEveImageLatest2Unauthorized{}
}

/* MarkEveImageLatest2Unauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type MarkEveImageLatest2Unauthorized struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *MarkEveImageLatest2Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/baseos/latest/hwclass/{imageArch}][%d] markEveImageLatest2Unauthorized  %+v", 401, o.Payload)
}
func (o *MarkEveImageLatest2Unauthorized) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *MarkEveImageLatest2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkEveImageLatest2Forbidden creates a MarkEveImageLatest2Forbidden with default headers values
func NewMarkEveImageLatest2Forbidden() *MarkEveImageLatest2Forbidden {
	return &MarkEveImageLatest2Forbidden{}
}

/* MarkEveImageLatest2Forbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type MarkEveImageLatest2Forbidden struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *MarkEveImageLatest2Forbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/baseos/latest/hwclass/{imageArch}][%d] markEveImageLatest2Forbidden  %+v", 403, o.Payload)
}
func (o *MarkEveImageLatest2Forbidden) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *MarkEveImageLatest2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkEveImageLatest2NotFound creates a MarkEveImageLatest2NotFound with default headers values
func NewMarkEveImageLatest2NotFound() *MarkEveImageLatest2NotFound {
	return &MarkEveImageLatest2NotFound{}
}

/* MarkEveImageLatest2NotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type MarkEveImageLatest2NotFound struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *MarkEveImageLatest2NotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/baseos/latest/hwclass/{imageArch}][%d] markEveImageLatest2NotFound  %+v", 404, o.Payload)
}
func (o *MarkEveImageLatest2NotFound) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *MarkEveImageLatest2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkEveImageLatest2InternalServerError creates a MarkEveImageLatest2InternalServerError with default headers values
func NewMarkEveImageLatest2InternalServerError() *MarkEveImageLatest2InternalServerError {
	return &MarkEveImageLatest2InternalServerError{}
}

/* MarkEveImageLatest2InternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type MarkEveImageLatest2InternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *MarkEveImageLatest2InternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/baseos/latest/hwclass/{imageArch}][%d] markEveImageLatest2InternalServerError  %+v", 500, o.Payload)
}
func (o *MarkEveImageLatest2InternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *MarkEveImageLatest2InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkEveImageLatest2GatewayTimeout creates a MarkEveImageLatest2GatewayTimeout with default headers values
func NewMarkEveImageLatest2GatewayTimeout() *MarkEveImageLatest2GatewayTimeout {
	return &MarkEveImageLatest2GatewayTimeout{}
}

/* MarkEveImageLatest2GatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type MarkEveImageLatest2GatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *MarkEveImageLatest2GatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/baseos/latest/hwclass/{imageArch}][%d] markEveImageLatest2GatewayTimeout  %+v", 504, o.Payload)
}
func (o *MarkEveImageLatest2GatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *MarkEveImageLatest2GatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

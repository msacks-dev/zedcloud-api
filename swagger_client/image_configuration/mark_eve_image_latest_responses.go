// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package image_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// MarkEveImageLatestReader is a Reader for the MarkEveImageLatest structure.
type MarkEveImageLatestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MarkEveImageLatestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMarkEveImageLatestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMarkEveImageLatestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewMarkEveImageLatestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMarkEveImageLatestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMarkEveImageLatestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewMarkEveImageLatestInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewMarkEveImageLatestGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMarkEveImageLatestOK creates a MarkEveImageLatestOK with default headers values
func NewMarkEveImageLatestOK() *MarkEveImageLatestOK {
	return &MarkEveImageLatestOK{}
}

/* MarkEveImageLatestOK describes a response with status code 200, with default header values.

A successful response.
*/
type MarkEveImageLatestOK struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *MarkEveImageLatestOK) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/baseos/latest][%d] markEveImageLatestOK  %+v", 200, o.Payload)
}
func (o *MarkEveImageLatestOK) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *MarkEveImageLatestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkEveImageLatestBadRequest creates a MarkEveImageLatestBadRequest with default headers values
func NewMarkEveImageLatestBadRequest() *MarkEveImageLatestBadRequest {
	return &MarkEveImageLatestBadRequest{}
}

/* MarkEveImageLatestBadRequest describes a response with status code 400, with default header values.

Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.
*/
type MarkEveImageLatestBadRequest struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *MarkEveImageLatestBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/baseos/latest][%d] markEveImageLatestBadRequest  %+v", 400, o.Payload)
}
func (o *MarkEveImageLatestBadRequest) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *MarkEveImageLatestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkEveImageLatestUnauthorized creates a MarkEveImageLatestUnauthorized with default headers values
func NewMarkEveImageLatestUnauthorized() *MarkEveImageLatestUnauthorized {
	return &MarkEveImageLatestUnauthorized{}
}

/* MarkEveImageLatestUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type MarkEveImageLatestUnauthorized struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *MarkEveImageLatestUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/baseos/latest][%d] markEveImageLatestUnauthorized  %+v", 401, o.Payload)
}
func (o *MarkEveImageLatestUnauthorized) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *MarkEveImageLatestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkEveImageLatestForbidden creates a MarkEveImageLatestForbidden with default headers values
func NewMarkEveImageLatestForbidden() *MarkEveImageLatestForbidden {
	return &MarkEveImageLatestForbidden{}
}

/* MarkEveImageLatestForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type MarkEveImageLatestForbidden struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *MarkEveImageLatestForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/baseos/latest][%d] markEveImageLatestForbidden  %+v", 403, o.Payload)
}
func (o *MarkEveImageLatestForbidden) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *MarkEveImageLatestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkEveImageLatestNotFound creates a MarkEveImageLatestNotFound with default headers values
func NewMarkEveImageLatestNotFound() *MarkEveImageLatestNotFound {
	return &MarkEveImageLatestNotFound{}
}

/* MarkEveImageLatestNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type MarkEveImageLatestNotFound struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *MarkEveImageLatestNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/baseos/latest][%d] markEveImageLatestNotFound  %+v", 404, o.Payload)
}
func (o *MarkEveImageLatestNotFound) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *MarkEveImageLatestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkEveImageLatestInternalServerError creates a MarkEveImageLatestInternalServerError with default headers values
func NewMarkEveImageLatestInternalServerError() *MarkEveImageLatestInternalServerError {
	return &MarkEveImageLatestInternalServerError{}
}

/* MarkEveImageLatestInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type MarkEveImageLatestInternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *MarkEveImageLatestInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/baseos/latest][%d] markEveImageLatestInternalServerError  %+v", 500, o.Payload)
}
func (o *MarkEveImageLatestInternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *MarkEveImageLatestInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarkEveImageLatestGatewayTimeout creates a MarkEveImageLatestGatewayTimeout with default headers values
func NewMarkEveImageLatestGatewayTimeout() *MarkEveImageLatestGatewayTimeout {
	return &MarkEveImageLatestGatewayTimeout{}
}

/* MarkEveImageLatestGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type MarkEveImageLatestGatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *MarkEveImageLatestGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/baseos/latest][%d] markEveImageLatestGatewayTimeout  %+v", 504, o.Payload)
}
func (o *MarkEveImageLatestGatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *MarkEveImageLatestGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

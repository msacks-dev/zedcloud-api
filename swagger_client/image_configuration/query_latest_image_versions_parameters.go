// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package image_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewQueryLatestImageVersionsParams creates a new QueryLatestImageVersionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQueryLatestImageVersionsParams() *QueryLatestImageVersionsParams {
	return &QueryLatestImageVersionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewQueryLatestImageVersionsParamsWithTimeout creates a new QueryLatestImageVersionsParams object
// with the ability to set a timeout on a request.
func NewQueryLatestImageVersionsParamsWithTimeout(timeout time.Duration) *QueryLatestImageVersionsParams {
	return &QueryLatestImageVersionsParams{
		timeout: timeout,
	}
}

// NewQueryLatestImageVersionsParamsWithContext creates a new QueryLatestImageVersionsParams object
// with the ability to set a context for a request.
func NewQueryLatestImageVersionsParamsWithContext(ctx context.Context) *QueryLatestImageVersionsParams {
	return &QueryLatestImageVersionsParams{
		Context: ctx,
	}
}

// NewQueryLatestImageVersionsParamsWithHTTPClient creates a new QueryLatestImageVersionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewQueryLatestImageVersionsParamsWithHTTPClient(client *http.Client) *QueryLatestImageVersionsParams {
	return &QueryLatestImageVersionsParams{
		HTTPClient: client,
	}
}

/* QueryLatestImageVersionsParams contains all the parameters to send to the API endpoint
   for the query latest image versions operation.

   Typically these are written to a http.Request.
*/
type QueryLatestImageVersionsParams struct {

	/* XRequestID.

	   User-Agent specified id to track a request
	*/
	XRequestID *string

	/* FilterNamePattern.

	   Image Architecture pattern to be matched.
	*/
	FilterNamePattern *string

	/* NextOrderBy.

	   OrderBy helps in sorting the list response
	*/
	NextOrderBy *string

	/* NextPageNum.

	   Page Number

	   Format: int64
	*/
	NextPageNum *int64

	/* NextPageSize.

	   Defines the page size

	   Format: int64
	*/
	NextPageSize *int64

	/* NextPageToken.

	   Page Token
	*/
	NextPageToken *string

	/* NextTotalPages.

	   Total number of pages to be fetched.

	   Format: int64
	*/
	NextTotalPages *int64

	/* Summary.

	   Only summary of the records required

	   Format: boolean
	*/
	Summary *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the query latest image versions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryLatestImageVersionsParams) WithDefaults() *QueryLatestImageVersionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the query latest image versions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryLatestImageVersionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the query latest image versions params
func (o *QueryLatestImageVersionsParams) WithTimeout(timeout time.Duration) *QueryLatestImageVersionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query latest image versions params
func (o *QueryLatestImageVersionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query latest image versions params
func (o *QueryLatestImageVersionsParams) WithContext(ctx context.Context) *QueryLatestImageVersionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query latest image versions params
func (o *QueryLatestImageVersionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query latest image versions params
func (o *QueryLatestImageVersionsParams) WithHTTPClient(client *http.Client) *QueryLatestImageVersionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query latest image versions params
func (o *QueryLatestImageVersionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the query latest image versions params
func (o *QueryLatestImageVersionsParams) WithXRequestID(xRequestID *string) *QueryLatestImageVersionsParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the query latest image versions params
func (o *QueryLatestImageVersionsParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithFilterNamePattern adds the filterNamePattern to the query latest image versions params
func (o *QueryLatestImageVersionsParams) WithFilterNamePattern(filterNamePattern *string) *QueryLatestImageVersionsParams {
	o.SetFilterNamePattern(filterNamePattern)
	return o
}

// SetFilterNamePattern adds the filterNamePattern to the query latest image versions params
func (o *QueryLatestImageVersionsParams) SetFilterNamePattern(filterNamePattern *string) {
	o.FilterNamePattern = filterNamePattern
}

// WithNextOrderBy adds the nextOrderBy to the query latest image versions params
func (o *QueryLatestImageVersionsParams) WithNextOrderBy(nextOrderBy *string) *QueryLatestImageVersionsParams {
	o.SetNextOrderBy(nextOrderBy)
	return o
}

// SetNextOrderBy adds the nextOrderBy to the query latest image versions params
func (o *QueryLatestImageVersionsParams) SetNextOrderBy(nextOrderBy *string) {
	o.NextOrderBy = nextOrderBy
}

// WithNextPageNum adds the nextPageNum to the query latest image versions params
func (o *QueryLatestImageVersionsParams) WithNextPageNum(nextPageNum *int64) *QueryLatestImageVersionsParams {
	o.SetNextPageNum(nextPageNum)
	return o
}

// SetNextPageNum adds the nextPageNum to the query latest image versions params
func (o *QueryLatestImageVersionsParams) SetNextPageNum(nextPageNum *int64) {
	o.NextPageNum = nextPageNum
}

// WithNextPageSize adds the nextPageSize to the query latest image versions params
func (o *QueryLatestImageVersionsParams) WithNextPageSize(nextPageSize *int64) *QueryLatestImageVersionsParams {
	o.SetNextPageSize(nextPageSize)
	return o
}

// SetNextPageSize adds the nextPageSize to the query latest image versions params
func (o *QueryLatestImageVersionsParams) SetNextPageSize(nextPageSize *int64) {
	o.NextPageSize = nextPageSize
}

// WithNextPageToken adds the nextPageToken to the query latest image versions params
func (o *QueryLatestImageVersionsParams) WithNextPageToken(nextPageToken *string) *QueryLatestImageVersionsParams {
	o.SetNextPageToken(nextPageToken)
	return o
}

// SetNextPageToken adds the nextPageToken to the query latest image versions params
func (o *QueryLatestImageVersionsParams) SetNextPageToken(nextPageToken *string) {
	o.NextPageToken = nextPageToken
}

// WithNextTotalPages adds the nextTotalPages to the query latest image versions params
func (o *QueryLatestImageVersionsParams) WithNextTotalPages(nextTotalPages *int64) *QueryLatestImageVersionsParams {
	o.SetNextTotalPages(nextTotalPages)
	return o
}

// SetNextTotalPages adds the nextTotalPages to the query latest image versions params
func (o *QueryLatestImageVersionsParams) SetNextTotalPages(nextTotalPages *int64) {
	o.NextTotalPages = nextTotalPages
}

// WithSummary adds the summary to the query latest image versions params
func (o *QueryLatestImageVersionsParams) WithSummary(summary *bool) *QueryLatestImageVersionsParams {
	o.SetSummary(summary)
	return o
}

// SetSummary adds the summary to the query latest image versions params
func (o *QueryLatestImageVersionsParams) SetSummary(summary *bool) {
	o.Summary = summary
}

// WriteToRequest writes these params to a swagger request
func (o *QueryLatestImageVersionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}
	}

	if o.FilterNamePattern != nil {

		// query param filter.namePattern
		var qrFilterNamePattern string

		if o.FilterNamePattern != nil {
			qrFilterNamePattern = *o.FilterNamePattern
		}
		qFilterNamePattern := qrFilterNamePattern
		if qFilterNamePattern != "" {

			if err := r.SetQueryParam("filter.namePattern", qFilterNamePattern); err != nil {
				return err
			}
		}
	}

	if o.NextOrderBy != nil {

		// query param next.orderBy
		var qrNextOrderBy string

		if o.NextOrderBy != nil {
			qrNextOrderBy = *o.NextOrderBy
		}
		qNextOrderBy := qrNextOrderBy
		if qNextOrderBy != "" {

			if err := r.SetQueryParam("next.orderBy", qNextOrderBy); err != nil {
				return err
			}
		}
	}

	if o.NextPageNum != nil {

		// query param next.pageNum
		var qrNextPageNum int64

		if o.NextPageNum != nil {
			qrNextPageNum = *o.NextPageNum
		}
		qNextPageNum := swag.FormatInt64(qrNextPageNum)
		if qNextPageNum != "" {

			if err := r.SetQueryParam("next.pageNum", qNextPageNum); err != nil {
				return err
			}
		}
	}

	if o.NextPageSize != nil {

		// query param next.pageSize
		var qrNextPageSize int64

		if o.NextPageSize != nil {
			qrNextPageSize = *o.NextPageSize
		}
		qNextPageSize := swag.FormatInt64(qrNextPageSize)
		if qNextPageSize != "" {

			if err := r.SetQueryParam("next.pageSize", qNextPageSize); err != nil {
				return err
			}
		}
	}

	if o.NextPageToken != nil {

		// query param next.pageToken
		var qrNextPageToken string

		if o.NextPageToken != nil {
			qrNextPageToken = *o.NextPageToken
		}
		qNextPageToken := qrNextPageToken
		if qNextPageToken != "" {

			if err := r.SetQueryParam("next.pageToken", qNextPageToken); err != nil {
				return err
			}
		}
	}

	if o.NextTotalPages != nil {

		// query param next.totalPages
		var qrNextTotalPages int64

		if o.NextTotalPages != nil {
			qrNextTotalPages = *o.NextTotalPages
		}
		qNextTotalPages := swag.FormatInt64(qrNextTotalPages)
		if qNextTotalPages != "" {

			if err := r.SetQueryParam("next.totalPages", qNextTotalPages); err != nil {
				return err
			}
		}
	}

	if o.Summary != nil {

		// query param summary
		var qrSummary bool

		if o.Summary != nil {
			qrSummary = *o.Summary
		}
		qSummary := swag.FormatBool(qrSummary)
		if qSummary != "" {

			if err := r.SetQueryParam("summary", qSummary); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

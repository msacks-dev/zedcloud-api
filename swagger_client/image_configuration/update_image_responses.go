// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package image_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// UpdateImageReader is a Reader for the UpdateImage structure.
type UpdateImageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateImageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateImageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateImageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateImageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateImageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateImageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateImageConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateImageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewUpdateImageGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateImageOK creates a UpdateImageOK with default headers values
func NewUpdateImageOK() *UpdateImageOK {
	return &UpdateImageOK{}
}

/* UpdateImageOK describes a response with status code 200, with default header values.

A successful response.
*/
type UpdateImageOK struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateImageOK) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] updateImageOK  %+v", 200, o.Payload)
}
func (o *UpdateImageOK) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateImageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateImageBadRequest creates a UpdateImageBadRequest with default headers values
func NewUpdateImageBadRequest() *UpdateImageBadRequest {
	return &UpdateImageBadRequest{}
}

/* UpdateImageBadRequest describes a response with status code 400, with default header values.

Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.
*/
type UpdateImageBadRequest struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateImageBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] updateImageBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateImageBadRequest) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateImageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateImageUnauthorized creates a UpdateImageUnauthorized with default headers values
func NewUpdateImageUnauthorized() *UpdateImageUnauthorized {
	return &UpdateImageUnauthorized{}
}

/* UpdateImageUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type UpdateImageUnauthorized struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateImageUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] updateImageUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateImageUnauthorized) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateImageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateImageForbidden creates a UpdateImageForbidden with default headers values
func NewUpdateImageForbidden() *UpdateImageForbidden {
	return &UpdateImageForbidden{}
}

/* UpdateImageForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type UpdateImageForbidden struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateImageForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] updateImageForbidden  %+v", 403, o.Payload)
}
func (o *UpdateImageForbidden) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateImageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateImageNotFound creates a UpdateImageNotFound with default headers values
func NewUpdateImageNotFound() *UpdateImageNotFound {
	return &UpdateImageNotFound{}
}

/* UpdateImageNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type UpdateImageNotFound struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateImageNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] updateImageNotFound  %+v", 404, o.Payload)
}
func (o *UpdateImageNotFound) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateImageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateImageConflict creates a UpdateImageConflict with default headers values
func NewUpdateImageConflict() *UpdateImageConflict {
	return &UpdateImageConflict{}
}

/* UpdateImageConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing edge application image record.
*/
type UpdateImageConflict struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateImageConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] updateImageConflict  %+v", 409, o.Payload)
}
func (o *UpdateImageConflict) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateImageConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateImageInternalServerError creates a UpdateImageInternalServerError with default headers values
func NewUpdateImageInternalServerError() *UpdateImageInternalServerError {
	return &UpdateImageInternalServerError{}
}

/* UpdateImageInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type UpdateImageInternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateImageInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] updateImageInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateImageInternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateImageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateImageGatewayTimeout creates a UpdateImageGatewayTimeout with default headers values
func NewUpdateImageGatewayTimeout() *UpdateImageGatewayTimeout {
	return &UpdateImageGatewayTimeout{}
}

/* UpdateImageGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type UpdateImageGatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UpdateImageGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] updateImageGatewayTimeout  %+v", 504, o.Payload)
}
func (o *UpdateImageGatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateImageGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package image_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// UploadImageChunkedReader is a Reader for the UploadImageChunked structure.
type UploadImageChunkedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadImageChunkedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadImageChunkedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewUploadImageChunkedAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUploadImageChunkedBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUploadImageChunkedUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUploadImageChunkedForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUploadImageChunkedNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUploadImageChunkedConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUploadImageChunkedInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewUploadImageChunkedGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUploadImageChunkedOK creates a UploadImageChunkedOK with default headers values
func NewUploadImageChunkedOK() *UploadImageChunkedOK {
	return &UploadImageChunkedOK{}
}

/* UploadImageChunkedOK describes a response with status code 200, with default header values.

A successful response.
*/
type UploadImageChunkedOK struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UploadImageChunkedOK) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/name/{name}/upload/chunked][%d] uploadImageChunkedOK  %+v", 200, o.Payload)
}
func (o *UploadImageChunkedOK) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UploadImageChunkedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadImageChunkedAccepted creates a UploadImageChunkedAccepted with default headers values
func NewUploadImageChunkedAccepted() *UploadImageChunkedAccepted {
	return &UploadImageChunkedAccepted{}
}

/* UploadImageChunkedAccepted describes a response with status code 202, with default header values.

Accepted. The API gateway accepted the request for uploading but the upload process has not been completed. Please check ImageStatus and ImageError fields to track the status of upload process and any error messages.
*/
type UploadImageChunkedAccepted struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UploadImageChunkedAccepted) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/name/{name}/upload/chunked][%d] uploadImageChunkedAccepted  %+v", 202, o.Payload)
}
func (o *UploadImageChunkedAccepted) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UploadImageChunkedAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadImageChunkedBadRequest creates a UploadImageChunkedBadRequest with default headers values
func NewUploadImageChunkedBadRequest() *UploadImageChunkedBadRequest {
	return &UploadImageChunkedBadRequest{}
}

/* UploadImageChunkedBadRequest describes a response with status code 400, with default header values.

Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.
*/
type UploadImageChunkedBadRequest struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UploadImageChunkedBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/name/{name}/upload/chunked][%d] uploadImageChunkedBadRequest  %+v", 400, o.Payload)
}
func (o *UploadImageChunkedBadRequest) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UploadImageChunkedBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadImageChunkedUnauthorized creates a UploadImageChunkedUnauthorized with default headers values
func NewUploadImageChunkedUnauthorized() *UploadImageChunkedUnauthorized {
	return &UploadImageChunkedUnauthorized{}
}

/* UploadImageChunkedUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type UploadImageChunkedUnauthorized struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UploadImageChunkedUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/name/{name}/upload/chunked][%d] uploadImageChunkedUnauthorized  %+v", 401, o.Payload)
}
func (o *UploadImageChunkedUnauthorized) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UploadImageChunkedUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadImageChunkedForbidden creates a UploadImageChunkedForbidden with default headers values
func NewUploadImageChunkedForbidden() *UploadImageChunkedForbidden {
	return &UploadImageChunkedForbidden{}
}

/* UploadImageChunkedForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type UploadImageChunkedForbidden struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UploadImageChunkedForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/name/{name}/upload/chunked][%d] uploadImageChunkedForbidden  %+v", 403, o.Payload)
}
func (o *UploadImageChunkedForbidden) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UploadImageChunkedForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadImageChunkedNotFound creates a UploadImageChunkedNotFound with default headers values
func NewUploadImageChunkedNotFound() *UploadImageChunkedNotFound {
	return &UploadImageChunkedNotFound{}
}

/* UploadImageChunkedNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type UploadImageChunkedNotFound struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UploadImageChunkedNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/name/{name}/upload/chunked][%d] uploadImageChunkedNotFound  %+v", 404, o.Payload)
}
func (o *UploadImageChunkedNotFound) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UploadImageChunkedNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadImageChunkedConflict creates a UploadImageChunkedConflict with default headers values
func NewUploadImageChunkedConflict() *UploadImageChunkedConflict {
	return &UploadImageChunkedConflict{}
}

/* UploadImageChunkedConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because
-- another request for uplink / upload is already in progress
-- image has been already uploaded, can't be modified again
*/
type UploadImageChunkedConflict struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UploadImageChunkedConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/name/{name}/upload/chunked][%d] uploadImageChunkedConflict  %+v", 409, o.Payload)
}
func (o *UploadImageChunkedConflict) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UploadImageChunkedConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadImageChunkedInternalServerError creates a UploadImageChunkedInternalServerError with default headers values
func NewUploadImageChunkedInternalServerError() *UploadImageChunkedInternalServerError {
	return &UploadImageChunkedInternalServerError{}
}

/* UploadImageChunkedInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type UploadImageChunkedInternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UploadImageChunkedInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/name/{name}/upload/chunked][%d] uploadImageChunkedInternalServerError  %+v", 500, o.Payload)
}
func (o *UploadImageChunkedInternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UploadImageChunkedInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadImageChunkedGatewayTimeout creates a UploadImageChunkedGatewayTimeout with default headers values
func NewUploadImageChunkedGatewayTimeout() *UploadImageChunkedGatewayTimeout {
	return &UploadImageChunkedGatewayTimeout{}
}

/* UploadImageChunkedGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type UploadImageChunkedGatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *UploadImageChunkedGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/name/{name}/upload/chunked][%d] uploadImageChunkedGatewayTimeout  %+v", 504, o.Payload)
}
func (o *UploadImageChunkedGatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *UploadImageChunkedGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

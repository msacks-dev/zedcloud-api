// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package resource_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new resource group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for resource group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateResourceGroup(params *CreateResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateResourceGroupOK, error)

	DeleteResourceGroup(params *DeleteResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteResourceGroupOK, error)

	GetResourceGroup(params *GetResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupOK, error)

	GetResourceGroupByName(params *GetResourceGroupByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupByNameOK, error)

	GetResourceGroupEvents(params *GetResourceGroupEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupEventsOK, error)

	GetResourceGroupEventsByName(params *GetResourceGroupEventsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupEventsByNameOK, error)

	GetResourceGroupResourceMetricsByID(params *GetResourceGroupResourceMetricsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupResourceMetricsByIDOK, error)

	GetResourceGroupResourceMetricsByName(params *GetResourceGroupResourceMetricsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupResourceMetricsByNameOK, error)

	QueryResourceGroups(params *QueryResourceGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryResourceGroupsOK, error)

	UpdateResourceGroup(params *UpdateResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateResourceGroupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateResourceGroup creates resource group

  Create a resource group record.
*/
func (a *Client) CreateResourceGroup(params *CreateResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResourceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateResourceGroup",
		Method:             "POST",
		PathPattern:        "/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateResourceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateResourceGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteResourceGroup deletes resource group

  Delete a resource group record.
*/
func (a *Client) DeleteResourceGroup(params *DeleteResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResourceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteResourceGroup",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteResourceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteResourceGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResourceGroup gets resource group

  Get the configuration (without security details) of a resource group record.
*/
func (a *Client) GetResourceGroup(params *GetResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetResourceGroup",
		Method:             "GET",
		PathPattern:        "/v1/projects/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetResourceGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResourceGroupByName gets resource group

  Get the configuration (without security details) of a resource group record.
*/
func (a *Client) GetResourceGroupByName(params *GetResourceGroupByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceGroupByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetResourceGroupByName",
		Method:             "GET",
		PathPattern:        "/v1/projects/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceGroupByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceGroupByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetResourceGroupByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResourceGroupEvents gets resource group events by id

  Get configuration and status events of a resource group by id.
*/
func (a *Client) GetResourceGroupEvents(params *GetResourceGroupEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceGroupEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetResourceGroupEvents",
		Method:             "GET",
		PathPattern:        "/v1/projects/id/{objid}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceGroupEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceGroupEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetResourceGroupEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResourceGroupEventsByName gets resource group events by name

  Get configuration and status events of a resource group by name.
*/
func (a *Client) GetResourceGroupEventsByName(params *GetResourceGroupEventsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupEventsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceGroupEventsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetResourceGroupEventsByName",
		Method:             "GET",
		PathPattern:        "/v1/projects/name/{objname}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceGroupEventsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceGroupEventsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetResourceGroupEventsByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResourceGroupResourceMetricsByID gets resource group resource usage timeline

  Get the resource usage timeline of a resource group as reported by the edge nodes in the resource group
*/
func (a *Client) GetResourceGroupResourceMetricsByID(params *GetResourceGroupResourceMetricsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupResourceMetricsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceGroupResourceMetricsByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetResourceGroupResourceMetricsById",
		Method:             "GET",
		PathPattern:        "/v1/projects/id/{objid}/timeSeries/{mType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceGroupResourceMetricsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceGroupResourceMetricsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetResourceGroupResourceMetricsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResourceGroupResourceMetricsByName gets resource group resource usage timeline

  Get the resource usage timeline of a resource group as reported by the edge nodes in the resource group
*/
func (a *Client) GetResourceGroupResourceMetricsByName(params *GetResourceGroupResourceMetricsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceGroupResourceMetricsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceGroupResourceMetricsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetResourceGroupResourceMetricsByName",
		Method:             "GET",
		PathPattern:        "/v1/projects/name/{objname}/timeSeries/{mType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceGroupResourceMetricsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceGroupResourceMetricsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetResourceGroupResourceMetricsByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryResourceGroups queries resource groups

  Query the resource group records.
*/
func (a *Client) QueryResourceGroups(params *QueryResourceGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryResourceGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryResourceGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryResourceGroups",
		Method:             "GET",
		PathPattern:        "/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryResourceGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryResourceGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryResourceGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateResourceGroup updates resource group

  Update a resource group record. The usual pattern to update a resource group record is to retrieve the record and update with the modified values in a new body to update the resource group record.
*/
func (a *Client) UpdateResourceGroup(params *UpdateResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateResourceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateResourceGroup",
		Method:             "PUT",
		PathPattern:        "/v1/projects/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateResourceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateResourceGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

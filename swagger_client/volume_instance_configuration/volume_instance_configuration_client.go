// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package volume_instance_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new volume instance configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for volume instance configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateVolumeInstance(params *CreateVolumeInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVolumeInstanceOK, error)

	DeleteVolumeInstance(params *DeleteVolumeInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVolumeInstanceOK, error)

	GetVolumeInstance(params *GetVolumeInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVolumeInstanceOK, error)

	GetVolumeInstanceByName(params *GetVolumeInstanceByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVolumeInstanceByNameOK, error)

	QueryVolumeInstances(params *QueryVolumeInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryVolumeInstancesOK, error)

	UpdateVolumeInstance(params *UpdateVolumeInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVolumeInstanceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateVolumeInstance creates edge volume instance

  Create an edge volume instance record.
*/
func (a *Client) CreateVolumeInstance(params *CreateVolumeInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVolumeInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVolumeInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVolumeInstance",
		Method:             "POST",
		PathPattern:        "/v1/volumes/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateVolumeInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVolumeInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVolumeInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVolumeInstance deletes volume instance

  Delete a volume instance record.
*/
func (a *Client) DeleteVolumeInstance(params *DeleteVolumeInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVolumeInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVolumeInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVolumeInstance",
		Method:             "DELETE",
		PathPattern:        "/v1/volumes/instances/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVolumeInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVolumeInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVolumeInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVolumeInstance gets edge volume instance

  Get the configuration (without security details) of an edge volume instance record.
*/
func (a *Client) GetVolumeInstance(params *GetVolumeInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVolumeInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumeInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVolumeInstance",
		Method:             "GET",
		PathPattern:        "/v1/volumes/instances/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVolumeInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVolumeInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVolumeInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVolumeInstanceByName gets edge volume instance

  Get the configuration (without security details) of an edge volume instance record.
*/
func (a *Client) GetVolumeInstanceByName(params *GetVolumeInstanceByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVolumeInstanceByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumeInstanceByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVolumeInstanceByName",
		Method:             "GET",
		PathPattern:        "/v1/volumes/instances/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVolumeInstanceByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVolumeInstanceByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVolumeInstanceByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryVolumeInstances queries edge volume instances

  Query the edge volume instance records.
*/
func (a *Client) QueryVolumeInstances(params *QueryVolumeInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryVolumeInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryVolumeInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryVolumeInstances",
		Method:             "GET",
		PathPattern:        "/v1/volumes/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryVolumeInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryVolumeInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryVolumeInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVolumeInstance updates edge volume instance

  Update an edge volume instance. The usual pattern to update an edge volume instance record is to retrieve the record and update with the modified values in a new body to update the edge volume instance record.
*/
func (a *Client) UpdateVolumeInstance(params *UpdateVolumeInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVolumeInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVolumeInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVolumeInstance",
		Method:             "PUT",
		PathPattern:        "/v1/volumes/instances/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVolumeInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVolumeInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVolumeInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

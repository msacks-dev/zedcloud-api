// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

package swagger_client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_client/edge_application_configuration"
	"github.com/zededa/zedcloud-api/swagger_client/edge_application_instance_configuration"
	"github.com/zededa/zedcloud-api/swagger_client/edge_application_instance_status"
	"github.com/zededa/zedcloud-api/swagger_client/bulk_job_ops"
	"github.com/zededa/zedcloud-api/swagger_client/cloud_diagnostics"
	"github.com/zededa/zedcloud-api/swagger_client/edge_diagnostics"
	"github.com/zededa/zedcloud-api/swagger_client/edge_network_configuration"
	"github.com/zededa/zedcloud-api/swagger_client/edge_network_instance_configuration"
	"github.com/zededa/zedcloud-api/swagger_client/edge_network_instance_status"
	"github.com/zededa/zedcloud-api/swagger_client/edge_node_configuration"
	"github.com/zededa/zedcloud-api/swagger_client/edge_node_status"
	"github.com/zededa/zedcloud-api/swagger_client/hardware_model"
	"github.com/zededa/zedcloud-api/swagger_client/resource_group"
	"github.com/zededa/zedcloud-api/swagger_client/resource_group_status"
	"github.com/zededa/zedcloud-api/swagger_client/artifact_manager"
	"github.com/zededa/zedcloud-api/swagger_client/datastore_configuration"
	"github.com/zededa/zedcloud-api/swagger_client/image_configuration"
	"github.com/zededa/zedcloud-api/swagger_client/volume_instance_configuration"
	"github.com/zededa/zedcloud-api/swagger_client/volume_instance_status"
	"github.com/zededa/zedcloud-api/swagger_client/identity_access_management"

)

// Default zedcloudapi HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "zedcontrol.zededa.net"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/api"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new zedcloudapi HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Zedcloudapi {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new zedcloudapi HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Zedcloudapi {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new zedcloudapi client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Zedcloudapi {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(Zedcloudapi)
	cli.Transport = transport
	cli.EdgeApplicationConfiguration = edge_application_configuration.New(transport, formats)
	cli.EdgeApplicationInstanceConfiguration = edge_application_instance_configuration.New(transport, formats)
	cli.EdgeApplicationInstanceStatus = edge_application_instance_status.New(transport, formats)
	cli.CloudDiagnostics = cloud_diagnostics.New(transport, formats)
	cli.EdgeDiagnostics = edge_diagnostics.New(transport, formats)
	cli.BulkJobOps = bulk_job_ops.New(transport, formats)
	cli.EdgeNetworkConfiguration = edge_network_configuration.New(transport, formats)
	cli.EdgeNetworkInstanceConfiguration = edge_network_instance_configuration.New(transport, formats)
	cli.EdgeNetworkInstanceStatus = edge_network_instance_status.New(transport, formats)
	cli.EdgeNodeConfiguration = edge_node_configuration.New(transport, formats)
	cli.EdgeNodeStatus = edge_node_status.New(transport, formats)
	cli.HardwareModel = hardware_model.New(transport, formats)
	cli.ResourceGroup = resource_group.New(transport, formats)
	cli.ResourceGroupStatus = resource_group_status.New(transport, formats)
	cli.ArtifactManager = artifact_manager.New(transport, formats)
	cli.DatastoreConfiguration = datastore_configuration.New(transport, formats)
	cli.ImageConfiguration = image_configuration.New(transport, formats)
	cli.VolumeInstanceConfiguration = volume_instance_configuration.New(transport, formats)
	cli.VolumeInstanceStatus = volume_instance_status.New(transport, formats)
	cli.IdentityAccessManagement = identity_access_management.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Zedcloudapi is a client for zedcloudapi
type Zedcloudapi struct {
	BulkJobOps bulk_job_ops.ClientService
	CloudDiagnostics cloud_diagnostics.ClientService
	EdgeApplicationConfiguration edge_application_configuration.ClientService
	EdgeApplicationInstanceConfiguration edge_application_instance_configuration.ClientService
	EdgeApplicationInstanceStatus edge_application_instance_status.ClientService
	EdgeDiagnostics edge_diagnostics.ClientService
	EdgeNetworkConfiguration edge_network_configuration.ClientService
	EdgeNetworkInstanceConfiguration edge_network_instance_configuration.ClientService
    EdgeNetworkInstanceStatus edge_network_instance_status.ClientService
	EdgeNodeConfiguration edge_node_configuration.ClientService
	EdgeNodeStatus edge_node_status.ClientService
	HardwareModel hardware_model.ClientService
	IdentityAccessManagement identity_access_management.ClientService
	ResourceGroup resource_group.ClientService
	ResourceGroupStatus resource_group_status.ClientService
	ArtifactManager artifact_manager.ClientService
	DatastoreConfiguration datastore_configuration.ClientService
	ImageConfiguration image_configuration.ClientService
	VolumeInstanceConfiguration volume_instance_configuration.ClientService
	VolumeInstanceStatus volume_instance_status.ClientService
	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Zedcloudapi) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.EdgeApplicationConfiguration.SetTransport(transport)
	c.EdgeApplicationInstanceConfiguration.SetTransport(transport)
	c.EdgeApplicationInstanceStatus.SetTransport(transport)
	c.CloudDiagnostics.SetTransport(transport)
	c.EdgeDiagnostics.SetTransport(transport)
	c.BulkJobOps.SetTransport(transport)
	c.EdgeNetworkConfiguration.SetTransport(transport)
	c.EdgeNetworkInstanceConfiguration.SetTransport(transport)
	c.EdgeNetworkInstanceStatus.SetTransport(transport)
	c.EdgeNodeConfiguration.SetTransport(transport)
	c.EdgeNodeStatus.SetTransport(transport)
	c.HardwareModel.SetTransport(transport)
	c.ResourceGroup.SetTransport(transport)
	c.ResourceGroupStatus.SetTransport(transport)
	c.ArtifactManager.SetTransport(transport)
	c.DatastoreConfiguration.SetTransport(transport)
	c.IdentityAccessManagement.SetTransport(transport)
	c.ImageConfiguration.SetTransport(transport)
	c.VolumeInstanceConfiguration.SetTransport(transport)
	c.VolumeInstanceStatus.SetTransport(transport)
}
